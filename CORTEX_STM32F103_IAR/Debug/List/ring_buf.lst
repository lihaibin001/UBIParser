###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:26
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\common\ring_buf.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\common\ring_buf.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\ring_buf.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\ring_buf.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\common\ring_buf.c
      1          /*----------------------------------------------------------------------------/
      2           *  (C)Dedao, 2016
      3           *-----------------------------------------------------------------------------/
      4           *
      5           * Copyright (C) 2016, Dedao, all right reserved.
      6           *
      7           * 1. Redistributions of source code must retain the above copyright notice,
      8           *    this condition and the following disclaimer.
      9           *
     10           * This software is provided by the copyright holder and contributors "AS IS"
     11           * and any warranties related to this software are DISCLAIMED.
     12           * The copyright owner or contributors be NOT LIABLE for any damages caused
     13           * by use of this software.
     14           *----------------------------------------------------------------------------*/
     15          
     16          /**********************************************************************
     17           *             Title:   Ring_Buffer.C
     18           *
     19           *       Description:   
     20           *
     21           *********************************************************************/
     22          
     23          /**********************************************************************
     24           * Include header files
     25           *********************************************************************/
     26          /*                                    */
     27          /*********************************************************************/
     28          #include   "compiler.h"        /* include type definitions */
     29          #include   "ring_buf.h"
     30          
     31          /*********************************************************************
     32           * File level pragmas
     33           *********************************************************************/
     34          
     35          /**********************************************************************
     36           * Constant and Macro Definitions using #define
     37           *********************************************************************/
     38          
     39          /**********************************************************************
     40           * Enumerations and Structures and Typedefs
     41           *********************************************************************/
     42          
     43          /**********************************************************************
     44           * Global and Const Variable Defining Definitions / Initializations
     45           *********************************************************************/
     46          
     47          /**********************************************************************
     48           * Static Variables and Const Variables With File Level Scope
     49           *********************************************************************/
     50          
     51          /**********************************************************************
     52           * ROM Const Variables With File Level Scope
     53           *********************************************************************/
     54          
     55          /**********************************************************************
     56           * Function Prototypes for Private Functions with File Level Scope
     57           *********************************************************************/
     58          
     59          
     60          /**********************************************************************
     61           * Add User defined functions
     62           *********************************************************************/
     63          
     64          
     65          /**********************************************************************
     66           * Function Definitions
     67           *********************************************************************/
     68          
     69          
     70          /**********************************************************************
     71           *    Purpose: Reset / Initialize ring buffer to empty
     72           * Parameters: Pointer to ring buf control structure
     73           *    Returns: None
     74           *********************************************************************/
     75          extern void Ring_Buf_Reset(Ring_Buf_Type *buf, uint8_t size)
     76          {
     77             buf->in = 0;
     78             buf->out = 0;
     79             buf->full = false;
     80             buf->size = size;
     81          }
     82          
     83          /**********************************************************************
     84           *    Purpose: returns whether buffer is empty
     85           * Parameters: Pointer to ring buf control structure
     86           *    Returns: true if buffer is empty
     87           *********************************************************************/
     88          extern bool Ring_Buf_Is_Empty(Ring_Buf_Type *buf)
     89          {
     90             return( !buf->full && (buf->in == buf->out));
     91          }
     92          
     93          /**********************************************************************
     94           *    Purpose: returns wether buffer is full
     95           * Parameters: Pointer to ring buf control structure
     96           *    Returns: true if buffer is full
     97           *********************************************************************/
     98          extern bool Ring_Buf_Is_Full(Ring_Buf_Type *buf)
     99          {
    100             return (buf->full);
    101          }
    102          
    103          /**********************************************************************
    104           *    Purpose: Logical adds element to ring buffer
    105           * Parameters: Pointer to ring buf control structure
    106           *    Returns: None
    107           *********************************************************************/
    108          extern void Ring_Buf_Add(Ring_Buf_Type *buf)
    109          {
    110             if (!buf->full)
    111             {
    112                buf->in++;                          // increment in index
    113                if (buf->in >= buf->size)           // wrapping as necessary
    114                {
    115                   buf->in = 0;
    116                }
    117                buf->full = (buf->in == buf->out);  // if in pointer reaches out then buffer is full
    118             }
    119          }
    120          
    121          /**********************************************************************
    122           *    Purpose: Logical remove element  from ring buffer
    123           * Parameters: Pointer to ring buf control structure
    124           *    Returns: None
    125           *********************************************************************/
    126          extern void Ring_Buf_Remove(Ring_Buf_Type *buf)
    127          {
    128             if (!Ring_Buf_Is_Empty(buf))
    129             {
    130                buf->out++;                         // incrment out index
    131                if (buf->out >= buf->size)          // wrapping as necessary
    132                {
    133                   buf->out = 0;
    134                }
    135                buf->full = false;                  // can not be full if we just removed one
    136             }
    137          }
    138          
    139          /**********************************************************************
    140           *
    141           * Revision History
    142           *
    143           *********************************************************************
    144           *
    145           * Intial Version
    146           *
    147           *********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Ring_Buf_Add
       0   Ring_Buf_Is_Empty
       0   Ring_Buf_Is_Full
       8   Ring_Buf_Remove
         8   -> Ring_Buf_Is_Empty
       0   Ring_Buf_Reset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  Ring_Buf_Add
      24  Ring_Buf_Is_Empty
       4  Ring_Buf_Is_Full
      38  Ring_Buf_Remove
      16  Ring_Buf_Reset

 
 126 bytes in section .text
 
 126 bytes of CODE memory

Errors: none
Warnings: none
