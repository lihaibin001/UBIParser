###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:27
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\drivers\spi_flash.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\drivers\spi_flash.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\spi_flash.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\spi_flash.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\drivers\spi_flash.c
      1          /**
      2            ******************************************************************************
      3            * @file    spi_flash.c
      4            * @author  MCD Application Team
      5            * @version V4.5.0
      6            * @date    07-March-2011
      7            * @brief   This file provides a set of functions needed to manage the SPI M25Pxxx
      8            *          FLASH memory mounted on STM32xx-EVAL board (refer to stm32_eval.h
      9            *          to know about the boards supporting this memory). 
     10            *          It implements a high level communication layer for read and write 
     11            *          from/to this memory. The needed STM32 hardware resources (SPI and 
     12            *          GPIO) are defined in stm32xx_eval.h file, and the initialization is 
     13            *          performed in sFLASH_LowLevel_Init() function declared in stm32xx_eval.c 
     14            *          file.
     15            *          You can easily tailor this driver to any other development board, 
     16            *          by just adapting the defines for hardware resources and 
     17            *          sFLASH_LowLevel_Init() function.
     18            *            
     19            *          +-----------------------------------------------------------+
     20            *          |                     Pin assignment                        |
     21            *          +-----------------------------+---------------+-------------+
     22            *          |  STM32 SPI Pins             |     sFLASH    |    Pin      |
     23            *          +-----------------------------+---------------+-------------+
     24            *          | sFLASH_CS_PIN               | ChipSelect(/S)|    1        |
     25            *          | sFLASH_SPI_MISO_PIN / MISO  |   DataOut(Q)  |    2        |
     26            *          |                             |   VCC         |    3 (3.3 V)|
     27            *          |                             |   GND         |    4 (0 V)  |
     28            *          | sFLASH_SPI_MOSI_PIN / MOSI  |   DataIn(D)   |    5        |
     29            *          | sFLASH_SPI_SCK_PIN / SCLK   |   Clock(C)    |    6        |
     30            *          |                             |    VCC        |    7 (3.3 V)|
     31            *          |                             |    VCC        |    8 (3.3 V)|  
     32            *          +-----------------------------+---------------+-------------+  
     33            ******************************************************************************
     34            ******************************************************************************  
     35            */ 
     36          
     37          /* Includes ------------------------------------------------------------------*/
     38          #include "standard.h"
     39          
     40          /** @addtogroup Utilities
     41            * @{
     42            */
     43          
     44          /** @addtogroup Common
     45            * @{
     46            */
     47          
     48          static void sFLASH_LowLevel_Init(void);
     49          #if 0
     50          static void sFLASH_LowLevel_DeInit(void);
     51          
     52          
     53          /**
     54            * @brief  DeInitializes the peripherals used by the SPI FLASH driver.
     55            * @param  None
     56            * @retval None
     57            */
     58          static void sFLASH_LowLevel_DeInit(void)
     59          {
     60          //  GPIO_InitTypeDef GPIO_InitStructure;
     61          
     62          //  /*!< Disable the sFLASH_SPI  */
     63          //  SPI_Cmd(sFLASH_SPI, DISABLE);
     64          //  
     65          //  /*!< DeInitializes the sFLASH_SPI */
     66          //  SPI_I2S_DeInit(sFLASH_SPI);
     67          //  
     68          //  /*!< sFLASH_SPI Periph clock disable */
     69          //  RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, DISABLE);
     70          //  
     71          }
     72          #endif
     73          /**
     74            * @brief  Initializes the peripherals used by the SPI FLASH driver.
     75            * @param  None
     76            * @retval None
     77            */
     78          static void sFLASH_LowLevel_Init(void)
     79          {
     80              GPIO_InitTypeDef GPIO_InitStructure;
     81          
     82              /*!< sFLASH_SPI_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO 
     83                 and sFLASH_SPI_SCK_GPIO Periph clock enable */
     84              RCC_APB2PeriphClockCmd(sFLASH_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
     85                                   sFLASH_SPI_SCK_GPIO_CLK, ENABLE);
     86          
     87              /*!< sFLASH_SPI Periph clock enable */
     88              RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, ENABLE);
     89            
     90              /*!< Configure sFLASH_SPI pins: SCK */
     91              GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
     92              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     93              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     94              GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
     95          
     96              /*!< Configure sFLASH_SPI pins: MOSI */
     97              GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
     98              GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
     99          
    100              /*!< Configure sFLASH_SPI pins: MISO */
    101              GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
    102              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
    103              GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
    104            
    105              /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
    106              GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
    107              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    108              GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
    109          }
    110          
    111          /** @defgroup STM32_EVAL_SPI_FLASH_Private_Functions
    112            * @{
    113            */ 
    114          
    115          /**
    116            * @brief  DeInitializes the peripherals used by the SPI FLASH driver.
    117            * @param  None
    118            * @retval None
    119            */
    120          void sFLASH_DeInit(void)
    121          {
    122            //GPIO_InitTypeDef GPIO_InitStructure;
    123            /*!< Send "Deep Power-down (DP) " instruction */
    124            sFLASH_SendByte(0xB9);
    125            sFLASH_CS_HIGH();
    126          }
    127          
    128          /**
    129            * @brief  Initializes the peripherals used by the SPI FLASH driver.
    130            * @param  None
    131            * @retval None
    132            */
    133          void sFLASH_Init(void)
    134          {
    135              SPI_InitTypeDef  SPI_InitStructure;
    136          
    137              sFLASH_LowLevel_Init();
    138          
    139              /*!< Deselect the FLASH: Chip Select high */
    140              sFLASH_CS_HIGH();
    141          
    142              /*!< SPI configuration */
    143              SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    144              SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    145              SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
    146              SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
    147              SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
    148              SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
    149              SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2; // 24/2=12MHz
    150          
    151              SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    152              SPI_InitStructure.SPI_CRCPolynomial = 7;
    153              SPI_Init(sFLASH_SPI, &SPI_InitStructure);
    154          
    155              /*!< Enable the sFLASH_SPI  */
    156              SPI_Cmd(sFLASH_SPI, ENABLE);
    157              /*!< Send "Release Deep Power-down / Device ID (ABh)  " instruction   */
    158          //    sFLASH_SendByte(0xAB);
    159          }
    160          
    161          /**
    162            * @brief  Erases the specified FLASH sector.
    163            * @param  SectorAddr: address of the sector to erase.
    164            * @retval None
    165            */
    166          void sFLASH_EraseSector(uint32_t SectorAddr)
    167          {
    168              if(E_OK == OS_Wait_Resource(RES_SPIFLASH, RESOURCE_TIMEOUT))   /* wait on SPI Flash to be available */
    169              {
    170                  /*!< Send write enable instruction */
    171                  sFLASH_WriteEnable();
    172          
    173                  /*!< Sector Erase */
    174                  /*!< Select the FLASH: Chip Select low */
    175                  sFLASH_CS_LOW();
    176                  /*!< Send Sector Erase instruction */
    177                  sFLASH_SendByte(sFLASH_CMD_SE);
    178                  /*!< Send SectorAddr high nibble address byte */
    179                  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
    180                  /*!< Send SectorAddr medium nibble address byte */
    181                  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
    182                  /*!< Send SectorAddr low nibble address byte */
    183                  sFLASH_SendByte(SectorAddr & 0xFF);
    184                  /*!< Deselect the FLASH: Chip Select high */
    185                  sFLASH_CS_HIGH();
    186          
    187                  /*!< Wait the end of Flash writing */
    188                  sFLASH_WaitForWriteEnd();
    189          
    190                  OS_Release_Resource(RES_SPIFLASH); /* release sole access on EE */
    191              }
    192          }
    193          
    194          /**
    195            * @brief  Erases the entire FLASH.
    196            * @param  None
    197            * @retval None
    198            */
    199          void sFLASH_EraseBulk(void)
    200          {
    201              if(E_OK == OS_Wait_Resource(RES_SPIFLASH, RESOURCE_TIMEOUT))   /* wait on SPI Flash to be available */
    202              {
    203                  /*!< Send write enable instruction */
    204                  sFLASH_WriteEnable();
    205          
    206                  /*!< Bulk Erase */
    207                  /*!< Select the FLASH: Chip Select low */
    208                  sFLASH_CS_LOW();
    209                  /*!< Send Bulk Erase instruction  */
    210                  sFLASH_SendByte(sFLASH_CMD_BE);
    211                  /*!< Deselect the FLASH: Chip Select high */
    212                  sFLASH_CS_HIGH();
    213          
    214                  /*!< Wait the end of Flash writing */
    215                  sFLASH_WaitForWriteEnd();
    216                  
    217                  OS_Release_Resource(RES_SPIFLASH); /* release sole access on EE */
    218              }
    219          }
    220          
    221          /**
    222            * @brief  Writes more than one byte to the FLASH with a single WRITE cycle 
    223            *         (Page WRITE sequence).
    224            * @note   The number of byte can't exceed the FLASH page size.
    225            * @param  pBuffer: pointer to the buffer  containing the data to be written
    226            *         to the FLASH.
    227            * @param  WriteAddr: FLASH's internal address to write to.
    228            * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
    229            *         or less than "sFLASH_PAGESIZE" value.
    230            * @retval None
    231            */
    232          void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
    233          {
    234              /*!< Enable the write access to the FLASH */
    235              sFLASH_WriteEnable();
    236          
    237              /*!< Select the FLASH: Chip Select low */
    238              sFLASH_CS_LOW();
    239              /*!< Send "Write to Memory " instruction */
    240              sFLASH_SendByte(sFLASH_CMD_WRITE);
    241              /*!< Send WriteAddr high nibble address byte to write to */
    242              sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
    243              /*!< Send WriteAddr medium nibble address byte to write to */
    244              sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
    245              /*!< Send WriteAddr low nibble address byte to write to */
    246              sFLASH_SendByte(WriteAddr & 0xFF);
    247          
    248              /*!< while there is data to be written on the FLASH */
    249              while (NumByteToWrite--)
    250              {
    251                  /*!< Send the current byte */
    252                  sFLASH_SendByte(*pBuffer);
    253                  /*!< Point on the next byte to be written */
    254                  pBuffer++;
    255              }
    256          
    257              /*!< Deselect the FLASH: Chip Select high */
    258              sFLASH_CS_HIGH();
    259          
    260              /*!< Wait the end of Flash writing */
    261              sFLASH_WaitForWriteEnd();
    262          }
    263          
    264          /**
    265            * @brief  Writes block of data to the FLASH. In this function, the number of
    266            *         WRITE cycles are reduced, using Page WRITE sequence.
    267            * @param  pBuffer: pointer to the buffer  containing the data to be written
    268            *         to the FLASH.
    269            * @param  WriteAddr: FLASH's internal address to write to.
    270            * @param  NumByteToWrite: number of bytes to write to the FLASH.
    271            * @retval None
    272            */
    273          void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
    274          {
    275              uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
    276          
    277              if(E_OK == OS_Wait_Resource(RES_SPIFLASH, RESOURCE_TIMEOUT))   /* wait on SPI Flash to be available */
    278              {
    279                  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
    280                  count = sFLASH_SPI_PAGESIZE - Addr;
    281                  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
    282                  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
    283          
    284                  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
    285                  {
    286                      if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
    287                      {
    288                          sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    289                      }
    290                      else /*!< NumByteToWrite > sFLASH_PAGESIZE */
    291                      {
    292                          while (NumOfPage--)
    293                          {
    294                      sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
    295                      WriteAddr +=  sFLASH_SPI_PAGESIZE;
    296                      pBuffer += sFLASH_SPI_PAGESIZE;
    297                    }
    298          
    299                    sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
    300                  }
    301                }
    302                else /*!< WriteAddr is not sFLASH_PAGESIZE aligned  */
    303                {
    304                  if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
    305                  {
    306                    if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
    307                    {
    308                      temp = NumOfSingle - count;
    309          
    310                      sFLASH_WritePage(pBuffer, WriteAddr, count);
    311                      WriteAddr +=  count;
    312                      pBuffer += count;
    313          
    314                      sFLASH_WritePage(pBuffer, WriteAddr, temp);
    315                    }
    316                    else
    317                    {
    318                      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    319                    }
    320                  }
    321                  else /*!< NumByteToWrite > sFLASH_PAGESIZE */
    322                  {
    323                    NumByteToWrite -= count;
    324                    NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
    325                    NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
    326          
    327                    sFLASH_WritePage(pBuffer, WriteAddr, count);
    328                    WriteAddr +=  count;
    329                    pBuffer += count;
    330          
    331                    while (NumOfPage--)
    332                    {
    333                      sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
    334                      WriteAddr +=  sFLASH_SPI_PAGESIZE;
    335                      pBuffer += sFLASH_SPI_PAGESIZE;
    336                    }
    337          
    338                    if (NumOfSingle != 0)
    339                    {
    340                      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
    341                    }
    342                  }
    343                }
    344              OS_Release_Resource(RES_SPIFLASH); /* release sole access on EE */
    345              }
    346          }
    347          
    348          /**
    349            * @brief  Reads a block of data from the FLASH.
    350            * @param  pBuffer: pointer to the buffer that receives the data read from the FLASH.
    351            * @param  ReadAddr: FLASH's internal address to read from.
    352            * @param  NumByteToRead: number of bytes to read from the FLASH.
    353            * @retval None
    354            */
    355          void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
    356          {
    357              if(E_OK == OS_Wait_Resource(RES_SPIFLASH, RESOURCE_TIMEOUT))   /* wait on SPI Flash to be available */
    358              {
    359                  /*!< Select the FLASH: Chip Select low */
    360                  sFLASH_CS_LOW();
    361          
    362                  /*!< Send "Read from Memory " instruction */
    363                  sFLASH_SendByte(sFLASH_CMD_READ);
    364          
    365                  /*!< Send ReadAddr high nibble address byte to read from */
    366                  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
    367                  /*!< Send ReadAddr medium nibble address byte to read from */
    368                  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
    369                  /*!< Send ReadAddr low nibble address byte to read from */
    370                  sFLASH_SendByte(ReadAddr & 0xFF);
    371          
    372                  while (NumByteToRead--) /*!< while there is data to be read */
    373                  {
    374                  /*!< Read a byte from the FLASH */
    375                  *pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    376                  /*!< Point to the next location where the byte read will be saved */
    377                  pBuffer++;
    378                  }
    379          
    380                  /*!< Deselect the FLASH: Chip Select high */
    381                  sFLASH_CS_HIGH();
    382          
    383                  OS_Release_Resource(RES_SPIFLASH); /* release sole access on EE */
    384              }
    385          }
    386          
    387          /**
    388            * @brief  Reads FLASH identification.
    389            * @param  None
    390            * @retval FLASH identification
    391            */
    392          uint32_t sFLASH_ReadID(void)
    393          {
    394            uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
    395          
    396            /*!< Select the FLASH: Chip Select low */
    397            sFLASH_CS_LOW();
    398          
    399            /*!< Send "RDID " instruction */
    400            sFLASH_SendByte(0x9F);
    401          
    402            /*!< Read a byte from the FLASH */
    403            Temp0 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    404          
    405            /*!< Read a byte from the FLASH */
    406            Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    407          
    408            /*!< Read a byte from the FLASH */
    409            Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    410          
    411            /*!< Deselect the FLASH: Chip Select high */
    412            sFLASH_CS_HIGH();
    413          
    414            Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
    415          
    416            return Temp;
    417          }
    418          
    419          /**
    420            * @brief  Initiates a read data byte (READ) sequence from the Flash.
    421            *   This is done by driving the /CS line low to select the device, then the READ
    422            *   instruction is transmitted followed by 3 bytes address. This function exit
    423            *   and keep the /CS line low, so the Flash still being selected. With this
    424            *   technique the whole content of the Flash is read with a single READ instruction.
    425            * @param  ReadAddr: FLASH's internal address to read from.
    426            * @retval None
    427            */
    428          void sFLASH_StartReadSequence(uint32_t ReadAddr)
    429          {
    430            /*!< Select the FLASH: Chip Select low */
    431            sFLASH_CS_LOW();
    432          
    433            /*!< Send "Read from Memory " instruction */
    434            sFLASH_SendByte(sFLASH_CMD_READ);
    435          
    436            /*!< Send the 24-bit address of the address to read from -------------------*/
    437            /*!< Send ReadAddr high nibble address byte */
    438            sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
    439            /*!< Send ReadAddr medium nibble address byte */
    440            sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
    441            /*!< Send ReadAddr low nibble address byte */
    442            sFLASH_SendByte(ReadAddr & 0xFF);
    443          }
    444          
    445          /**
    446            * @brief  Reads a byte from the SPI Flash.
    447            * @note   This function must be used only if the Start_Read_Sequence function
    448            *         has been previously called.
    449            * @param  None
    450            * @retval Byte Read from the SPI Flash.
    451            */
    452          uint8_t sFLASH_ReadByte(void)
    453          {
    454            return (sFLASH_SendByte(sFLASH_DUMMY_BYTE));
    455          }
    456          
    457          /**
    458            * @brief  Sends a byte through the SPI interface and return the byte received
    459            *         from the SPI bus.
    460            * @param  byte: byte to send.
    461            * @retval The value of the received byte.
    462            */
    463          uint8_t sFLASH_SendByte(uint8_t byte)
    464          {
    465            /*!< Loop while DR register in not emplty */
    466            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
    467          
    468            /*!< Send byte through the SPI1 peripheral */
    469            SPI_I2S_SendData(sFLASH_SPI, byte);
    470          
    471            /*!< Wait to receive a byte */
    472            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    473          
    474            /*!< Return the byte read from the SPI bus */
    475            return SPI_I2S_ReceiveData(sFLASH_SPI);
    476          }
    477          
    478          /**
    479            * @brief  Sends a Half Word through the SPI interface and return the Half Word
    480            *         received from the SPI bus.
    481            * @param  HalfWord: Half Word to send.
    482            * @retval The value of the received Half Word.
    483            */
    484          uint16_t sFLASH_SendHalfWord(uint16_t HalfWord)
    485          {
    486            /*!< Loop while DR register in not emplty */
    487            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
    488          
    489            /*!< Send Half Word through the sFLASH peripheral */
    490            SPI_I2S_SendData(sFLASH_SPI, HalfWord);
    491          
    492            /*!< Wait to receive a Half Word */
    493            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    494          
    495            /*!< Return the Half Word read from the SPI bus */
    496            return SPI_I2S_ReceiveData(sFLASH_SPI);
    497          }
    498          
    499          /**
    500            * @brief  Enables the write access to the FLASH.
    501            * @param  None
    502            * @retval None
    503            */
    504          void sFLASH_WriteEnable(void)
    505          {
    506            /*!< Select the FLASH: Chip Select low */
    507            sFLASH_CS_LOW();
    508          
    509            /*!< Send "Write Enable" instruction */
    510            sFLASH_SendByte(sFLASH_CMD_WREN);
    511          
    512            /*!< Deselect the FLASH: Chip Select high */
    513            sFLASH_CS_HIGH();
    514          }
    515          
    516          /**
    517            * @brief  Polls the status of the Write In Progress (WIP) flag in the FLASH's
    518            *         status register and loop until write opertaion has completed.
    519            * @param  None
    520            * @retval None
    521            */
    522          void sFLASH_WaitForWriteEnd(void)
    523          {
    524            uint8_t flashstatus = 0;
    525          
    526            /*!< Select the FLASH: Chip Select low */
    527            sFLASH_CS_LOW();
    528          
    529            /*!< Send "Read Status Register" instruction */
    530            sFLASH_SendByte(sFLASH_CMD_RDSR);
    531          
    532            /*!< Loop as long as the memory is busy with a write cycle */
    533            do
    534            {
    535              /*!< Send a dummy byte to generate the clock needed by the FLASH
    536              and put the value of the status register in FLASH_Status variable */
    537              flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    538          
    539            }
    540            while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
    541          
    542            /*!< Deselect the FLASH: Chip Select high */
    543            sFLASH_CS_HIGH();
    544          }
    545          
    546          /**
    547            * @}
    548            */
    549          
    550          /**
    551            * @}
    552            */
    553          
    554          /**
    555            * @}
    556            */
    557          
    558          /**
    559            * @}
    560            */
    561          
    562          /**
    563            * @}
    564            */  
    565          
    566          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    567          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   sFLASH_DeInit
         8   -> GPIO_SetBits
         8   -> sFLASH_SendByte
       8   sFLASH_EraseBulk
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> OS_Release_Resource
         8   -> OS_Wait_Resource
         8   -> sFLASH_SendByte
         8   -> sFLASH_WaitForWriteEnd
         8   -> sFLASH_WriteEnable
       8   sFLASH_EraseSector
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> OS_Release_Resource
         8   -> OS_Wait_Resource
         8   -> sFLASH_SendByte
         8   -> sFLASH_WaitForWriteEnd
         8   -> sFLASH_WriteEnable
      24   sFLASH_Init
        24   -> GPIO_SetBits
        24   -> SPI_Cmd
        24   -> SPI_Init
        24   -> sFLASH_LowLevel_Init
       8   sFLASH_LowLevel_Init
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd
      16   sFLASH_ReadBuffer
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> OS_Release_Resource
        16   -> OS_Wait_Resource
        16   -> sFLASH_SendByte
       8   sFLASH_ReadByte
         8   -> sFLASH_SendByte
      16   sFLASH_ReadID
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> sFLASH_SendByte
       8   sFLASH_SendByte
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_ReceiveData
         8   -> SPI_I2S_SendData
       8   sFLASH_SendHalfWord
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_ReceiveData
         8   -> SPI_I2S_SendData
       8   sFLASH_StartReadSequence
         8   -> GPIO_ResetBits
         8   -> sFLASH_SendByte
       8   sFLASH_WaitForWriteEnd
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> sFLASH_SendByte
      32   sFLASH_WriteBuffer
        32   -> OS_Release_Resource
        32   -> OS_Wait_Resource
        32   -> sFLASH_WritePage
       8   sFLASH_WriteEnable
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> sFLASH_SendByte
      16   sFLASH_WritePage
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> sFLASH_SendByte
        16   -> sFLASH_WaitForWriteEnd
        16   -> sFLASH_WriteEnable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
      20  sFLASH_DeInit
      52  sFLASH_EraseBulk
      80  sFLASH_EraseSector
     100  sFLASH_Init
     110  sFLASH_LowLevel_Init
      96  sFLASH_ReadBuffer
      10  sFLASH_ReadByte
      66  sFLASH_ReadID
      50  sFLASH_SendByte
      46  sFLASH_SendHalfWord
      44  sFLASH_StartReadSequence
      40  sFLASH_WaitForWriteEnd
     352  sFLASH_WriteBuffer
      26  sFLASH_WriteEnable
      84  sFLASH_WritePage

 
 1 184 bytes in section .text
 
 1 184 bytes of CODE memory

Errors: none
Warnings: none
