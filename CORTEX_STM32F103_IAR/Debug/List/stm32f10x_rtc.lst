###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\stm32f10x_rtc.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\stm32f10x_rtc.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_rtc.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the RTC firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_rtc.h"
     24          //#define USE_DEBUG
     25          #include "Debug.h"
     26          
     27          #include "standard.h"
     28          
     29          /** @addtogroup STM32F10x_StdPeriph_Driver
     30            * @{
     31            */
     32          
     33          /** @defgroup RTC 
     34            * @brief RTC driver modules
     35            * @{
     36            */
     37          
     38          /** @defgroup RTC_Private_TypesDefinitions
     39            * @{
     40            */ 
     41          /**
     42            * @}
     43            */
     44          
     45          /** @defgroup RTC_Private_Defines
     46            * @{
     47            */
     48          #define RTC_LSB_MASK     ((uint32_t)0x0000FFFF)  /*!< RTC LSB Mask */
     49          #define PRLH_MSB_MASK    ((uint32_t)0x000F0000)  /*!< RTC Prescaler MSB Mask */
     50          #define REF_RTC_BASE     ((uint32_t)10000000) /* divide base for RTC calibration */
     51          
     52          //static uint8_t Is_Leap_Year(uint16_t year);
     53          
     54          /**
     55            * @}
     56            */
     57          
     58          /** @defgroup RTC_Private_Macros
     59            * @{
     60            */
     61          
     62          /**
     63            * @}
     64            */
     65          
     66          /** @defgroup RTC_Private_Variables
     67            * @{
     68            */
     69          
     70          //时间结构体
     71          typedef struct
     72          {
     73              uint8_t hour;
     74              uint8_t min;
     75              uint8_t sec;                 
     76              uint16_t w_year;
     77              uint8_t  w_month;
     78              uint8_t  w_date;
     79              uint8_t  week;            
     80          }tm;
     81          
     82          tm rtc_timer;
     83          
     84          static const uint8_t mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};
     85          
     86          // RTC calibration reference
     87          static uint32_t ref_start = 0;
     88          static int32_t ref_cal = 0;
     89          
     90          /**
     91            * @}
     92            */
     93          
     94          /** @defgroup RTC_Private_FunctionPrototypes
     95            * @{
     96            */
     97          
     98          /**
     99            * @}
    100            */
    101          
    102          /** @defgroup RTC_Private_Functions
    103            * @{
    104            */
    105          
    106          /**
    107            * @brief  Enables or disables the specified RTC interrupts.
    108            * @param  RTC_IT: specifies the RTC interrupts sources to be enabled or disabled.
    109            *   This parameter can be any combination of the following values:
    110            *     @arg RTC_IT_OW: Overflow interrupt
    111            *     @arg RTC_IT_ALR: Alarm interrupt
    112            *     @arg RTC_IT_SEC: Second interrupt
    113            * @param  NewState: new state of the specified RTC interrupts.
    114            *   This parameter can be: ENABLE or DISABLE.
    115            * @retval None
    116            */
    117          void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
    118          {
    119            /* Check the parameters */
    120            assert_param(IS_RTC_IT(RTC_IT));  
    121            assert_param(IS_FUNCTIONAL_STATE(NewState));
    122            
    123            if (NewState != DISABLE)
    124            {
    125              RTC->CRH |= RTC_IT;
    126            }
    127            else
    128            {
    129              RTC->CRH &= (uint16_t)~RTC_IT;
    130            }
    131          }
    132          
    133          /**
    134            * @brief  Enters the RTC configuration mode.
    135            * @param  None
    136            * @retval None
    137            */
    138          void RTC_EnterConfigMode(void)
    139          {
    140            /* Set the CNF flag to enter in the Configuration Mode */
    141            RTC->CRL |= RTC_CRL_CNF;
    142          }
    143          
    144          /**
    145            * @brief  Exits from the RTC configuration mode.
    146            * @param  None
    147            * @retval None
    148            */
    149          void RTC_ExitConfigMode(void)
    150          {
    151            /* Reset the CNF flag to exit from the Configuration Mode */
    152            RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    153          }
    154          
    155          /**
    156            * @brief  Gets the RTC counter value.
    157            * @param  None
    158            * @retval RTC counter value.
    159            */
    160          uint32_t RTC_GetCounter(void)
    161          {
    162            uint16_t tmp = 0;
    163            uint32_t rt;
    164            uint32_t delta = 0;
    165            tmp = RTC->CNTL;
    166            rt = (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    167          /*  if (ref_start < rt)
    168            {
    169                uint32_t high = ref_cal/1000;
    170                uint32_t low = ref_cal%1000;
    171                uint32_t delta_high = ((rt - ref_start)*(high)) / (REF_RTC_BASE/1000);
    172                uint32_t delta_low = ((rt - ref_start)*(low)) / (REF_RTC_BASE);
    173                delta = delta_high+delta_low;
    174                rt -= delta;
    175            }*/
    176            return rt;
    177          }
    178          
    179          /**
    180            * @brief  Sets the RTC counter value.
    181            * @param  CounterValue: RTC counter new value.
    182            * @retval None
    183            */
    184          void RTC_SetCounter(uint32_t CounterValue)
    185          { 
    186            RTC_EnterConfigMode();
    187            /* Set RTC COUNTER MSB word */
    188            RTC->CNTH = CounterValue >> 16;
    189            /* Set RTC COUNTER LSB word */
    190            RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    191            RTC_ExitConfigMode();
    192          }
    193          
    194          /**
    195            * @brief  Sets the RTC prescaler value.
    196            * @param  PrescalerValue: RTC prescaler new value.
    197            * @retval None
    198            */
    199          void RTC_SetPrescaler(uint32_t PrescalerValue)
    200          {
    201            /* Check the parameters */
    202            assert_param(IS_RTC_PRESCALER(PrescalerValue));
    203            
    204            RTC_EnterConfigMode();
    205            /* Set RTC PRESCALER MSB word */
    206            RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    207            /* Set RTC PRESCALER LSB word */
    208            RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    209            RTC_ExitConfigMode();
    210          }
    211          
    212          /**
    213            * @brief  Sets the RTC alarm value.
    214            * @param  AlarmValue: RTC alarm new value.
    215            * @retval None
    216            */
    217          void RTC_SetAlarm(uint32_t AlarmValue)
    218          {  
    219            RTC_EnterConfigMode();
    220            /* Set the ALARM MSB word */
    221            RTC->ALRH = AlarmValue >> 16;
    222            /* Set the ALARM LSB word */
    223            RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    224            RTC_ExitConfigMode();
    225          }
    226          
    227          /**
    228            * @brief  Gets the RTC divider value.
    229            * @param  None
    230            * @retval RTC Divider value.
    231            */
    232          uint32_t RTC_GetDivider(void)
    233          {
    234            uint32_t tmp = 0x00;
    235            tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    236            tmp |= RTC->DIVL;
    237            return tmp;
    238          }
    239          
    240          /**
    241            * @brief  Waits until last write operation on RTC registers has finished.
    242            * @note   This function must be called before any write to RTC registers.
    243            * @param  None
    244            * @retval None
    245            */
    246          void RTC_WaitForLastTask(void)
    247          {
    248            /* Loop until RTOFF flag is set */
    249            while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    250            {
    251            }
    252          }
    253          
    254          /**
    255            * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
    256            *   are synchronized with RTC APB clock.
    257            * @note   This function must be called before any read operation after an APB reset
    258            *   or an APB clock stop.
    259            * @param  None
    260            * @retval None
    261            */
    262          void RTC_WaitForSynchro(void)
    263          {
    264            /* Clear RSF flag */
    265            RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    266            /* Loop until RSF flag is set */
    267            while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    268            {
    269            }
    270          }
    271          
    272          /**
    273            * @brief  Checks whether the specified RTC flag is set or not.
    274            * @param  RTC_FLAG: specifies the flag to check.
    275            *   This parameter can be one the following values:
    276            *     @arg RTC_FLAG_RTOFF: RTC Operation OFF flag
    277            *     @arg RTC_FLAG_RSF: Registers Synchronized flag
    278            *     @arg RTC_FLAG_OW: Overflow flag
    279            *     @arg RTC_FLAG_ALR: Alarm flag
    280            *     @arg RTC_FLAG_SEC: Second flag
    281            * @retval The new state of RTC_FLAG (SET or RESET).
    282            */
    283          FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
    284          {
    285            FlagStatus bitstatus = RESET;
    286            
    287            /* Check the parameters */
    288            assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
    289            
    290            if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    291            {
    292              bitstatus = SET;
    293            }
    294            else
    295            {
    296              bitstatus = RESET;
    297            }
    298            return bitstatus;
    299          }
    300          
    301          /**
    302            * @brief  Clears the RTC's pending flags.
    303            * @param  RTC_FLAG: specifies the flag to clear.
    304            *   This parameter can be any combination of the following values:
    305            *     @arg RTC_FLAG_RSF: Registers Synchronized flag. This flag is cleared only after
    306            *                        an APB reset or an APB Clock stop.
    307            *     @arg RTC_FLAG_OW: Overflow flag
    308            *     @arg RTC_FLAG_ALR: Alarm flag
    309            *     @arg RTC_FLAG_SEC: Second flag
    310            * @retval None
    311            */
    312          void RTC_ClearFlag(uint16_t RTC_FLAG)
    313          {
    314            /* Check the parameters */
    315            assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    316              
    317            /* Clear the corresponding RTC flag */
    318            RTC->CRL &= (uint16_t)~RTC_FLAG;
    319          }
    320          
    321          /**
    322            * @brief  Checks whether the specified RTC interrupt has occurred or not.
    323            * @param  RTC_IT: specifies the RTC interrupts sources to check.
    324            *   This parameter can be one of the following values:
    325            *     @arg RTC_IT_OW: Overflow interrupt
    326            *     @arg RTC_IT_ALR: Alarm interrupt
    327            *     @arg RTC_IT_SEC: Second interrupt
    328            * @retval The new state of the RTC_IT (SET or RESET).
    329            */
    330          ITStatus RTC_GetITStatus(uint16_t RTC_IT)
    331          {
    332            ITStatus bitstatus = RESET;
    333            /* Check the parameters */
    334            assert_param(IS_RTC_GET_IT(RTC_IT)); 
    335            
    336            bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    337            if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    338            {
    339              bitstatus = SET;
    340            }
    341            else
    342            {
    343              bitstatus = RESET;
    344            }
    345            return bitstatus;
    346          }
    347          
    348          /**
    349            * @brief  Clears the RTC's interrupt pending bits.
    350            * @param  RTC_IT: specifies the interrupt pending bit to clear.
    351            *   This parameter can be any combination of the following values:
    352            *     @arg RTC_IT_OW: Overflow interrupt
    353            *     @arg RTC_IT_ALR: Alarm interrupt
    354            *     @arg RTC_IT_SEC: Second interrupt
    355            * @retval None
    356            */
    357          void RTC_ClearITPendingBit(uint16_t RTC_IT)
    358          {
    359            /* Check the parameters */
    360            assert_param(IS_RTC_IT(RTC_IT));  
    361            
    362            /* Clear the corresponding RTC pending bit */
    363            RTC->CRL &= (uint16_t)~RTC_IT;
    364          }
    365          
    366          /**
    367            * @brief  RTC configuration.
    368            */
    369          void RTC_Config(void)
    370          {
    371              uint16_t u16_WaitForOscSource;
    372              if(PWR_GetFlagStatus(PWR_FLAG_WU) != RESET)
    373              {
    374                  /* Clear Wake Up flag */
    375                  PWR_ClearFlag(PWR_FLAG_WU);
    376              }
    377              RTC_ClearITPendingBit(RTC_IT_ALR);
    378              RTC_ClearITPendingBit(RTC_IT_SEC);
    379          
    380              if (BKP_ReadBackupRegister(BKP_DR1) != 0x5A5A)
    381              {
    382          
    383                  /* Enable PWR and BKP clocks */
    384                  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
    385          
    386                  /* Allow access to BKP Domain */
    387                  PWR_BackupAccessCmd(ENABLE);
    388          
    389                  /* Reset Backup Domain */
    390                  BKP_DeInit();
    391          
    392                  /* Enable the LSI OSC */
    393          //        RCC_LSICmd(ENABLE);
    394                  RCC_LSEConfig(RCC_LSE_ON);
    395                  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
    396                  {}
    397                  /* Select the RTC Clock Source */
    398                  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
    399                  /* Select LSE as RTC Clock Source */
    400                  /* Enable RTC Clock */
    401                  RCC_RTCCLKCmd(ENABLE);
    402          
    403                  /* Wait for RTC registers synchronization */
    404                  RTC_WaitForSynchro();
    405          
    406                  /* Wait until last write operation on RTC registers has finished */
    407                  RTC_WaitForLastTask();
    408          
    409                  /* Enable the RTC Second */
    410                  RTC_ITConfig(RTC_IT_SEC, ENABLE);
    411          
    412                  /* Wait until last write operation on RTC registers has finished */
    413                  RTC_WaitForLastTask();
    414          
    415                  /* Set RTC prescaler: set RTC period to 1sec */
    416                  RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
    417          
    418                  /* Wait until last write operation on RTC registers has finished */
    419                  RTC_WaitForLastTask();
    420          
    421                  BKP_WriteBackupRegister(BKP_DR1, 0x5A5A);
    422                  RTC_Set(1970,01,01,0,0,0);//
    423          
    424                  RCC_ClearFlag();
    425          //        batt_volt_nv_erase();
    426              }
    427              else
    428              {
    429          
    430                  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
    431                  for(u16_WaitForOscSource=0;u16_WaitForOscSource<5000;u16_WaitForOscSource++);
    432          //        RCC_LSICmd(ENABLE);
    433                  RCC_LSEConfig(RCC_LSE_ON);
    434                  /* Wait till LSI is ready */
    435                  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
    436          //        while (RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET)
    437                  {}
    438                  /* Select the RTC Clock Source */
    439                  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
    440          //        RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
    441                  /* Select LSE as RTC Clock Source */
    442                  /* Enable RTC Clock */
    443                  RCC_RTCCLKCmd(ENABLE);
    444                  /* Wait for RTC registers synchronization */
    445                  RTC_WaitForSynchro();
    446                  /* Wait until last write operation on RTC registers has finished */
    447                  RTC_WaitForLastTask();
    448          //        RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
    449                  if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET)
    450                  {
    451                      DEBUG_PRINT0(DEBUG_MEDIUM,"[RTC]:power on!\r\n");
    452                      RTC_Set(1970,01,01,0,0,0);//
    453                  }
    454                  else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET)
    455                  {
    456                      DEBUG_PRINT0(DEBUG_MEDIUM,"[RTC]:external reset!\r\n");
    457                  }
    458          
    459                  RTC_ITConfig(RTC_IT_SEC, ENABLE);
    460          
    461                  /* Wait until last write operation on RTC registers has finished */
    462                  RTC_WaitForLastTask();
    463                  RCC_ClearFlag();
    464              }
    465          
    466              return;
    467          }
    468          
    469          uint8_t RTC_Set(uint16_t syear, uint8_t smon, uint8_t sday, uint8_t hour, uint8_t min, uint8_t sec)
    470          {
    471              uint16_t t;
    472              uint32_t seccount=0;
    473              if(syear<2000||syear>2099)
    474                  return 1;     
    475              for(t=1970;t<syear;t++)
    476              {
    477                  if(Is_Leap_Year(t))
    478                      seccount+=31622400;
    479                  else
    480                      seccount+=31536000;
    481              }
    482              smon-=1;
    483              for(t=0;t<smon;t++)
    484              {
    485                  seccount+=(u32)mon_table[t]*86400;
    486                  if(Is_Leap_Year(syear)&&t==1)seccount+=86400;        
    487              }
    488              seccount+=(u32)(sday-1)*86400;
    489              seccount+=(u32)hour*3600;
    490              seccount+=(u32)min*60;
    491              seccount+=sec;                                                                                    
    492          
    493          //    RTC_Set_Ref(seccount,224358);
    494              if ((seccount > 1424000000) && (ref_start > 1424000000))
    495              {
    496                  uint32_t rtc_now = RTC_GetCounter();
    497                  if (rtc_now > rtc_now)
    498                  {
    499                      if (ref_cal != 0)
    500                      {
    501                          ref_cal += ((rtc_now - seccount)*5000000) / (rtc_now - ref_start);
    502                      }
    503                      else
    504                      {
    505                          ref_cal = ((rtc_now - seccount)*10000000) / (rtc_now - ref_start);
    506                      }
    507                  }
    508              }
    509          
    510              PWR_BackupAccessCmd(ENABLE);
    511              RTC_WaitForLastTask();
    512              RTC_SetCounter(seccount);
    513              RTC_WaitForLastTask();
    514              return 0;     
    515          }
    516          
    517          uint8_t RTC_Get(uint8_t *data)
    518          {
    519              static u16 daycnt=0;
    520              u32 timecount=0;
    521              u32 temp=0;
    522              u16 temp1=0;
    523          
    524              timecount=RTC_GetCounter();
    525          
    526              temp=timecount/86400;
    527              if(daycnt!=temp)
    528              {
    529                  daycnt=temp;
    530                  temp1=1970;
    531                  while(temp>=365)
    532                  {
    533                      if(Is_Leap_Year(temp1))
    534                      {
    535                          if(temp>=366) {
    536                              temp-=366;
    537                          } else {
    538                              temp1++;
    539                              break;
    540                          }
    541                      }
    542                      else temp-=365;
    543                      temp1++;
    544                  }
    545                  rtc_timer.w_year=temp1;
    546                  temp1=0;
    547                  while(temp>=28)
    548                  {
    549                      if(Is_Leap_Year(rtc_timer.w_year)&&temp1==1)
    550                      {
    551                          if(temp>=29)temp-=29;
    552                          else break;
    553                      }
    554                      else
    555                      {
    556                          if(temp>=mon_table[temp1])temp-=mon_table[temp1];
    557                          else break;
    558                      }
    559                      temp1++; 
    560                  }
    561                  rtc_timer.w_month=temp1+1;
    562                  rtc_timer.w_date=temp+1;
    563              }
    564              else if (temp==0)
    565              {
    566                  rtc_timer.w_year=1970;
    567                  rtc_timer.w_month=1;
    568                  rtc_timer.w_date=1;
    569              }
    570              temp=timecount%86400;    
    571              rtc_timer.hour=temp/3600;
    572              rtc_timer.min=(temp%3600)/60;     
    573              rtc_timer.sec=(temp%3600)%60;
    574              if (data != NULL)
    575              {
    576          	    sprintf((char *)data,"%d",rtc_timer.w_year);
    577          	    *(data+4) = (rtc_timer.w_month/10) + '0';
    578          	    *(data+5) = (rtc_timer.w_month%10) + '0';
    579          	    *(data+6) = (rtc_timer.w_date/10) + '0';
    580          	    *(data+7) = (rtc_timer.w_date%10) + '0';
    581          	    *(data+8) = (rtc_timer.hour/10) + '0';
    582          	    *(data+9) = (rtc_timer.hour%10) + '0';
    583          	    *(data+10) = (rtc_timer.min/10) + '0';
    584          	    *(data+11) = (rtc_timer.min%10) + '0';
    585          	    *(data+12) = (rtc_timer.sec/10) + '0';
    586          	    *(data+13) = (rtc_timer.sec%10) + '0';
    587          	    //DEBUG_PRINT1(DEBUG_MEDIUM,"[RTC]%s\r\n",data);
    588              }
    589              return 0;
    590          }
    591          
    592          void RTC_Set_Ref(u32 ref_rtc, int32_t cal)
    593          {
    594              if ((ref_rtc > 0) && (ref_rtc != 0xffffffff))
    595                  ref_start = ref_rtc;
    596              if ((cal > -100000000) && (cal < 100000000))
    597                  ref_cal = cal;
    598          }
    599          
    600          uint32_t RTC_Get_Cal()
    601          {
    602              return ref_cal;
    603          }
    604          
    605          /**
    606            * @}
    607            */
    608          
    609          /**
    610            * @}
    611            */
    612          
    613          /**
    614            * @}
    615            */
    616          
    617          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RTC_ClearFlag
       0   RTC_ClearITPendingBit
      16   RTC_Config
        16   -> BKP_DeInit
        16   -> BKP_ReadBackupRegister
        16   -> BKP_WriteBackupRegister
        16   -> PWR_BackupAccessCmd
        16   -> PWR_ClearFlag
        16   -> PWR_GetFlagStatus
        16   -> RCC_APB1PeriphClockCmd
        16   -> RCC_ClearFlag
        16   -> RCC_GetFlagStatus
        16   -> RCC_LSEConfig
        16   -> RCC_RTCCLKCmd
        16   -> RCC_RTCCLKConfig
        16   -> RTC_ClearITPendingBit
        16   -> RTC_ITConfig
        16   -> RTC_Set
        16   -> RTC_SetPrescaler
        16   -> RTC_WaitForLastTask
        16   -> RTC_WaitForSynchro
       0   RTC_EnterConfigMode
       0   RTC_ExitConfigMode
      24   RTC_Get
        24   -> Is_Leap_Year
        24   -> RTC_GetCounter
        24   -> sprintf
       0   RTC_GetCounter
       0   RTC_GetDivider
       0   RTC_GetFlagStatus
       0   RTC_GetITStatus
       0   RTC_Get_Cal
       0   RTC_ITConfig
      32   RTC_Set
        32   -> Is_Leap_Year
        32   -> PWR_BackupAccessCmd
        32   -> RTC_GetCounter
        32   -> RTC_SetCounter
        32   -> RTC_WaitForLastTask
       8   RTC_SetAlarm
         8   -> RTC_EnterConfigMode
         8   -> RTC_ExitConfigMode
       8   RTC_SetCounter
         8   -> RTC_EnterConfigMode
         8   -> RTC_ExitConfigMode
       8   RTC_SetPrescaler
         8   -> RTC_EnterConfigMode
         8   -> RTC_ExitConfigMode
       0   RTC_Set_Ref
       0   RTC_WaitForLastTask
       0   RTC_WaitForSynchro


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
       4  ?_0
      18  RTC_ClearFlag
      18  RTC_ClearITPendingBit
     288  RTC_Config
      18  RTC_EnterConfigMode
      20  RTC_ExitConfigMode
     426  RTC_Get
      26  RTC_GetCounter
      28  RTC_GetDivider
      26  RTC_GetFlagStatus
      40  RTC_GetITStatus
       6  RTC_Get_Cal
      40  RTC_ITConfig
     284  RTC_Set
      28  RTC_SetAlarm
      28  RTC_SetCounter
      32  RTC_SetPrescaler
      30  RTC_Set_Ref
      12  RTC_WaitForLastTask
      30  RTC_WaitForSynchro
       2  daycnt
      12  mon_table
       4  ref_cal
       4  ref_start
      12  rtc_timer

 
    22 bytes in section .bss
    16 bytes in section .rodata
 1 490 bytes in section .text
 
 1 490 bytes of CODE  memory
    16 bytes of CONST memory
    22 bytes of DATA  memory

Errors: none
Warnings: 1
