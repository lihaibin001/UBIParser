###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:22
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\Diag_Factory\Diag_man.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\Diag_Factory\Diag_man.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\Diag_man.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\Diag_man.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\Diag_Factory\Diag_man.c
      1          /*----------------------------------------------------------------------------/
      2           *  (C)Dedao, 2016
      3           *-----------------------------------------------------------------------------/
      4           *
      5           * Copyright (C) 2016, Dedao, all right reserved.
      6           *
      7           * 1. Redistributions of source code must retain the above copyright notice,
      8           *    this condition and the following disclaimer.
      9           *
     10           * This software is provided by the copyright holder and contributors "AS IS"
     11           * and any warranties related to this software are DISCLAIMED.
     12           * The copyright owner or contributors be NOT LIABLE for any damages caused
     13           * by use of this software.
     14           *----------------------------------------------------------------------------*/
     15          /**********************************************************************
     16           *  Title:  Diag_man.c
     17           *
     18           *  Module Description:  This is the code file for Factory Diagnostic.
     19           *
     20           *********************************************************************/
     21          
     22          /**********************************************************************
     23           * Include header files
     24           *********************************************************************/
     25          #include "Standard.h"
     26          #include "TelmProtocol.h"
     27          #include "gps.h"
     28          #include "ATProtocol.h"
     29          #include "crc_ccitt.h"
     30          /**********************************************************************
     31          * Static Variables and Const Variables With File Level Scope
     32          *********************************************************************/
     33          static uint8_t diag_tx_multi_frame_num;
     34          
     35          /**********************************************************************
     36           * Constant and Macro Definitions using #define
     37           *********************************************************************/
     38          #define MDG_ERROR_TRIES           5
     39          
     40          #define DIAG_PERIODIC_TIMER       20
     41          #define DIAG_PERIODIC_HOOK_CYCLE  (1000 / DIAG_PERIODIC_TIMER)  //1s
     42          
     43          #define MDG_CMD_PENGDING_TIME     200   // 2s
     44          
     45          /**********************************************************************
     46           * Enumerations and Structures and Typedefs
     47           *********************************************************************/
     48          typedef struct AP_Factory_Data_Tag
     49          {
     50          	uint8_t crc16_checksum[2];
     51          	uint8_t data_addr[2];
     52          	uint8_t data[48];
     53          	uint8_t data_totle_len;
     54          	uint8_t data_cur_len;
     55          } AP_Factory_Data_T;
     56          
     57          
     58          typedef union app_sw_length_Tag
     59          {
     60          	uint8_t len[4];
     61          	uint32_t length;
     62          } app_sw_length_T;
     63          /**********************************************************************
     64          * Global and Const Variable Defining Definitions / Initializations
     65          *********************************************************************/
     66          uint8_t Diag_Tx_Message[DIAG_TX_FRAME_SIZE];
     67          static bool Mdg_Enter_Diag = false;
     68          __no_init bool mdg_in_mode;
     69          uint8_t Mdg_SW_Upgrage_mode=false;
     70          uint8_t MDG_Tx_Message[MDG_CAN_FRAME_SIZE];
     71          uint8_t MDG_Rx_Message[MDG_CAN_FRAME_SIZE];
     72          bool MDG_Get_New_Message = false;
     73          MDG_Cmd_Info_Type MDG_Info;
     74          
     75          AP_Factory_Data_T AP_Factory_Data;
     76          /**********************************************************************
     77           * Static Variables and Const Variables With File Level Scope
     78           *********************************************************************/
     79          STATIC_VAR Tick_Type mdg_mfg_diag_timer;                                
     80          app_sw_length_T app_sw_length;
     81                                      
     82          /**********************************************************************
     83           * Function Prototypes for Private Functions with File Level Scope
     84           *********************************************************************/
     85          
     86          static void mdg_decode_diag_message(const uint8_t *rx_msg);
     87          static void mdg_encode_diag_message(void);
     88          static void mdg_check_enter_daignostic_mode(const uint8_t *rx_msg);
     89          static void mdg_check_exit_daignostic_mode(const uint8_t *rx_msg);
     90          static void mdg_clear_mfg_diag_timer(void);
     91          static bool mdg_mfg_diag_timer_is_expired(void);
     92          static void mdg_reset_mfg_diag_timer(void);
     93          static void mdg_exit_mfg_diag_mode(void);
     94          static void mdg_send_response(void);
     95          static void mdg_info_mcu_report_no_error(void);
     96          
     97          /**********************************************************************
     98          * Add User defined functions
     99          *********************************************************************/
    100          #include "Diag_man.cu"
    101          
    102          /**********************************************************************
    103          *	File Static Prototype Declare Section
    104          **********************************************************************/
    105          
    106          /**********************************************************************
    107           * ROM Const Variables With File Level Scope
    108           *********************************************************************/
    109          
    110          /**********************************************************************
    111           * Function Definitions
    112           *********************************************************************/
    113          
    114          /***********************************************************************
    115          *  Function: Diag_periodic_diag_hook 
    116          *  Parameters: void
    117          *  Returns: void
    118          *  Description: periodic diag ,if the state changed ,then Report results 
    119          ***********************************************************************/
    120          void Diag_periodic_diag_hook(void)
    121          {
    122          
    123          }
    124          
    125          /***********************************************************************
    126           *  Function: mdg_decode_diag_message 
    127           *  Parameters: rx_msg--pointer to messsage to decode
    128           *  Returns: none
    129           *  Description: Decodes standard 8 byte manufacturing diagnostic message
    130           ***********************************************************************/
    131          static void mdg_decode_diag_message(const uint8_t *rx_msg)
    132          {
    133          	uint8_t frame_ctl;
    134          	uint8_t command;
    135          	uint16_t crc_result;
    136          	gps_data_t gpsInfo;
    137          
    138          	if(rx_msg[0] == mdg_exit_diag_key[0])
    139          	{
    140          		mdg_check_exit_daignostic_mode(rx_msg);
    141          		return;
    142          	}
    143          	else if(rx_msg[0] == mdg_enter_diag_key[0])
    144          	{
    145          		mdg_check_enter_daignostic_mode(rx_msg);
    146          		return;
    147          	}
    148          	else if(Mdg_Enter_Diag == false)
    149          	{
    150          		return;
    151          	}
    152          
    153          	frame_ctl = rx_msg[0];
    154          	command = rx_msg[1];
    155          	MDG_Info.Command = command;
    156          	MDG_Info.MCU_Tx_Flag = false;
    157          	MDG_Info.MPU_Tx_Flag = false;
    158          	MDG_Info.Response_Code = MDG_RESP_NO_ERROR;
    159          
    160          	Diag_Tx_Message[DIAG_TX_FRAME_SIZE - 1] = C003_CMD_STARTED;
    161          
    162          	switch(command)
    163          	{
    164          		case AP_FACTORY_CMD_CHECKSUM_GET:
    165          			crc_result = rom_crc_ccitt();
    166          			AP_Factory_Data.crc16_checksum[0] = crc_result >> 8;
    167          			AP_Factory_Data.crc16_checksum[1] = crc_result & 0xFF;
    168          			mdg_info_mcu_report_no_error();
    169          			break;
    170          		case AP_FACTORY_CMD_APP_CHECKSUM_GET:
    171          			memcpy(&app_sw_length.len[0], &rx_msg[3], 4);
    172          			crc_result=0xffff;
    173          			crc_result = crc_ccitt(crc_result,(uint8_t *)ROM_APP_Start_Address,app_sw_length.length);
    174          			AP_Factory_Data.crc16_checksum[0] = crc_result >> 8;
    175          			AP_Factory_Data.crc16_checksum[1] = crc_result & 0xFF;
    176          			mdg_info_mcu_report_no_error();
    177          			break;
    178          		case AP_FACTORY_CMD_SW_VER_GET:
    179          			AP_Factory_Data.data[0]=*(SY_Swid()+13);
    180          			AP_Factory_Data.data[1]=*(SY_Swid()+14);
    181          			AP_Factory_Data.data[2]=*(SY_Swid()+15);
    182          			mdg_info_mcu_report_no_error();
    183          			break;
    184          		case AP_FACTORY_CMD_IMSI_GET:
    185          			memcpy(AP_Factory_Data.data,pcATProt_getImsiData(),15);
    186          			AP_Factory_Data.data_totle_len =15;  //data length
    187          			mdg_info_mcu_report_no_error();
    188          			break;
    189          		case AP_FACTORY_CMD_PDSN_GET:
    190          			memcpy(AP_Factory_Data.data, Telm_Get_DEVID(), TELM_INFO_LEN_DEVID);
    191          			AP_Factory_Data.data_totle_len = TELM_INFO_LEN_DEVID;  //data length
    192          			mdg_info_mcu_report_no_error();
    193          			break;
    194          		case AP_FACTORY_CMD_IMEI_GET:
    195          			memcpy(AP_Factory_Data.data, pcATProt_getImeiData(), 15);
    196          			AP_Factory_Data.data_totle_len =15;  //data length
    197          			mdg_info_mcu_report_no_error();
    198          			break;
    199          		case AP_FACTORY_CMD_PDSN_SET: //Write PDSN to Nor flash
    200          		case AP_FACTORY_CMD_MBSN_SET: //Write MBSN to Nor flash
    201          		case AP_FACTORY_CMD_TEST_RESULT_SET: //Write test result to Nor flash
    202          		case AP_FACTORY_CMD_CLEAR_NOR_FLASH_SET: //Clear Nor Flash
    203          		case AP_FACTORY_CMD_SW_UPGRADE_DATA: //APP software upgrade
    204          		case AP_FACTORY_CMD_SW_UPGRADE_START:
    205          			if(frame_ctl == 0x11)  //only one frame
    206          			{
    207          				memcpy(&AP_Factory_Data.data[0], &rx_msg[3], rx_msg[2]);
    208          				AP_Factory_Data.data_totle_len = rx_msg[2];
    209          				if(command==AP_FACTORY_CMD_TEST_RESULT_SET)
    210          				{
    211          					set_factory_test(AP_Factory_Data.data[0]);
    212          					mdg_info_mcu_report_no_error();
    213          				}
    214          				else if(command==AP_FACTORY_CMD_CLEAR_NOR_FLASH_SET)
    215          				{
    216          					clear_nv_config();
    217          					mdg_info_mcu_report_no_error();
    218          				}
    219          			}
    220          			else if((frame_ctl & 0x0F) == 0x01)  //fist frame of mutil-frame
    221          			{
    222          				memcpy(&AP_Factory_Data.data[0], &rx_msg[3], 5);
    223          				AP_Factory_Data.data_totle_len = rx_msg[2];   // SCB:bug "-1 " need deleted 
    224          				AP_Factory_Data.data_cur_len = 5;
    225          			}
    226          			else if(AP_Factory_Data.data_totle_len - AP_Factory_Data.data_cur_len > 6)
    227          			{
    228          				memcpy(&AP_Factory_Data.data[AP_Factory_Data.data_cur_len], &rx_msg[2], 6);
    229          				AP_Factory_Data.data_cur_len += 6;
    230          			}
    231          			else
    232          			{
    233          				memcpy(&AP_Factory_Data.data[AP_Factory_Data.data_cur_len], &rx_msg[2], AP_Factory_Data.data_totle_len - AP_Factory_Data.data_cur_len);
    234          				if(command==AP_FACTORY_CMD_PDSN_SET)
    235          				{
    236          					clear_nv_config();//clear all NV
    237          					set_init_flag();//set NV init flag					
    238          					Write_PDSN_of_devinfo(AP_Factory_Data.data);
    239          					write_init_config();//write network config to NV
    240          					load_from_nv();//load new config right now
    241          				}
    242          				else if(command==AP_FACTORY_CMD_MBSN_SET)
    243          				{
    244          					Write_MBSN_of_devinfo(AP_Factory_Data.data);
    245          				}
    246          				else if(command==AP_FACTORY_CMD_SW_UPGRADE_START ||command==AP_FACTORY_CMD_SW_UPGRADE_DATA)
    247          				{
    248          				// Add for CAN bootloader 
    249          					AP_Factory_Data.data[0]=CAN_upgrade_app_sw(AP_Factory_Data.data,command);
    250          					AP_Factory_Data.data[1]=rec_index;
    251          					AP_Factory_Data.data[2]=(uint8_t)(crc_reg&0xff);
    252          					AP_Factory_Data.data[3]=(uint8_t)(crc_reg>>8);
    253          				}
    254          				mdg_info_mcu_report_no_error();
    255          			}
    256          			break;
    257          		case AP_FACTORY_CMD_MBSN_GET:
    258          			break;
    259          		case AP_FACTORY_CMD_GPSR_SIM_GET:
    260          			AP_Factory_Data.data[0]=ATProt_Sim_OK();
    261          			mdg_info_mcu_report_no_error();
    262          			break;
    263          		case AP_FACTORY_CMD_GPSR_SIM_NW_GET:
    264          			AP_Factory_Data.data[0]=ATProt_GPRS_Connect();
    265          			mdg_info_mcu_report_no_error();
    266          			break;
    267          		case AP_FACTORY_CMD_GPSR_INFOR_GET:
    268          			AP_Factory_Data.data[0]=ATProt_ACK_Got();
    269          			mdg_info_mcu_report_no_error();
    270          			break;
    271          		case AP_FACTORY_CMD_GPRS_SIGNAL_GET:
    272          			AP_Factory_Data.data[0]=pcATProt_getRSSI();
    273          			mdg_info_mcu_report_no_error();
    274          			break;
    275          		case AP_FACTORY_CMD_GPS_INFOR_GET:
    276          			if(GPS_Get_Ready_Flag() == true)
    277          			{
    278          				vGps_Get_Gps_Info(&gpsInfo);
    279          				AP_Factory_Data.data_totle_len =32;  //data length
    280          				AP_Factory_Data.data[0]=gpsInfo.east_or_west;
    281          				memcpy(&AP_Factory_Data.data[1],&gpsInfo.longitude,15);
    282          				AP_Factory_Data.data[17]=gpsInfo.north_or_sourth;
    283          				memcpy(&AP_Factory_Data.data[18],&gpsInfo.latitude,15);
    284          				mdg_info_mcu_report_no_error();
    285          			}
    286          			break;
    287          		case AP_FACTORY_CMD_GPS_SAT_INFOR_GET:
    288          			if(GPS_Get_Ready_Flag() == true)
    289          			{
    290          				vGps_Get_Gps_Info(&gpsInfo);
    291          				AP_Factory_Data.data_totle_len =25;  //data length
    292          				AP_Factory_Data.data[0]=gpsInfo.gps_sat_info.viewed_sat_num;
    293          				memcpy(&AP_Factory_Data.data[1],gpsInfo.gps_sat_info.sat_info,2*AP_Factory_Data.data[0]);
    294          				mdg_info_mcu_report_no_error();
    295          			}
    296          			break;
    297          		case AP_FACTORY_CMD_GSENSOR_INFOR_GET:
    298          			AP_Factory_Data.data_totle_len =6;  //data length
    299          			mdg_info_mcu_report_no_error();
    300          			break;
    301          		case AP_FACTORY_CMD_FASTSLEEP_SET:
    302          			Sys_Clear_Wakeup_Src_Flags();
    303          			Sys_Req_Enter_Deep_Standby();
    304          			break;
    305          		case AP_FACTORY_CMD_COLDSTART_SET:
    306          			SY_Cold_Start();
    307          			break;
    308          		case AP_FACTORY_CMD_K_L_LINE_STATUS_GET:
    309          			break;
    310          
    311          		default:
    312          			MDG_Info.MCU_Tx_Flag = true;
    313          			MDG_Info.Response_Code = MDG_RESP_CMD_NOT_SUPPORT;
    314          			MDG_Info.Pending_Flag = true;
    315          			MDG_Info.Pending_Time = 0;
    316          			break;
    317          	}
    318          }
    319          
    320          /***********************************************************************
    321          *  Function: mdg_encode_diag_message 
    322          *  Parameters: none
    323          *  Returns: none
    324          *  Description: Encodes standard 8 byte manufacturing diagnostic message
    325          ***********************************************************************/
    326          static void mdg_encode_diag_message(void)
    327          {
    328          	uint8_t i;
    329          	static uint8_t multi_frame = 1;
    330          
    331          	MDG_Tx_Message[0] = 0x11;
    332          	MDG_Tx_Message[1] = MDG_Info.Command;
    333          	MDG_Tx_Message[3] = MDG_Info.Response_Code;
    334          
    335          	for(i = 0; i < 5; i++)
    336          	{
    337          		MDG_Tx_Message[4 + i] = 0;
    338          	}
    339          	
    340          	if(MDG_Info.Response_Code == MDG_RESP_NO_ERROR)
    341          	{
    342          		switch(MDG_Info.Command)
    343          		{
    344          			case AP_FACTORY_CMD_CHECKSUM_GET:
    345          			case AP_FACTORY_CMD_APP_CHECKSUM_GET:
    346          				MDG_Tx_Message[2] = 3;
    347          				memcpy(&MDG_Tx_Message[4],&AP_Factory_Data.crc16_checksum[0],2);
    348          				break;
    349          			case AP_FACTORY_CMD_SW_VER_GET:
    350          				MDG_Tx_Message[2] = 4; //data length
    351          				memcpy(&MDG_Tx_Message[4],&AP_Factory_Data.data[0],3);
    352          				break;
    353          			case AP_FACTORY_CMD_SW_UPGRADE_DATA:
    354          			case AP_FACTORY_CMD_SW_UPGRADE_START:
    355          				MDG_Tx_Message[2] = 5; //data length
    356          				memcpy(&MDG_Tx_Message[4],&AP_Factory_Data.data[0],4);
    357          			case AP_FACTORY_CMD_GPSR_SIM_GET:
    358          			case AP_FACTORY_CMD_GPSR_SIM_NW_GET:
    359          			case AP_FACTORY_CMD_GPSR_INFOR_GET:
    360          			case AP_FACTORY_CMD_GPRS_SIGNAL_GET:
    361          				MDG_Tx_Message[2] = 2; //data length
    362          				MDG_Tx_Message[4] =AP_Factory_Data.data[0];
    363          				break;
    364          			case AP_FACTORY_CMD_K_L_LINE_STATUS_GET:
    365          				MDG_Tx_Message[2] = 3; //data length
    366          				memcpy(&MDG_Tx_Message[4],&AP_Factory_Data.data[0],2);
    367          				break;
    368          			case AP_FACTORY_CMD_IMSI_GET:
    369          			case AP_FACTORY_CMD_PDSN_GET:
    370          			case AP_FACTORY_CMD_MBSN_GET:
    371          			case AP_FACTORY_CMD_GPS_INFOR_GET:
    372          			case AP_FACTORY_CMD_GPS_SAT_INFOR_GET:
    373          			case AP_FACTORY_CMD_GSENSOR_INFOR_GET:
    374          			case AP_FACTORY_CMD_IMEI_GET:
    375          				diag_tx_multi_frame_num =( AP_Factory_Data.data_totle_len -4)/ 6 + ((((AP_Factory_Data.data_totle_len-4) % 6) > 0) ? 1 : 0)+1;
    376          
    377          				if(multi_frame <= diag_tx_multi_frame_num)
    378          				{
    379          					MDG_Tx_Message[0] = ((diag_tx_multi_frame_num) << 4) + multi_frame;
    380          
    381          					if(multi_frame == 1)
    382          					{
    383          						MDG_Tx_Message[2] = AP_Factory_Data.data_totle_len+1;
    384          						memcpy(&MDG_Tx_Message[4],AP_Factory_Data.data,4);
    385          						AP_Factory_Data.data_cur_len = 4;
    386          						multi_frame = 2;
    387          						MDG_Info.Multi_Frame = true;
    388          					}
    389          					else
    390          					{
    391          						if((AP_Factory_Data.data_totle_len - AP_Factory_Data.data_cur_len) > 6)
    392          						{
    393          							memcpy(&MDG_Tx_Message[2], &AP_Factory_Data.data[AP_Factory_Data.data_cur_len], 6);
    394          
    395          							AP_Factory_Data.data_cur_len += 6;
    396          
    397          							multi_frame++;
    398          							MDG_Info.Multi_Frame = true;
    399          						}
    400          						else
    401          						{
    402          							memcpy(&MDG_Tx_Message[2], &AP_Factory_Data.data[AP_Factory_Data.data_cur_len], AP_Factory_Data.data_totle_len - AP_Factory_Data.data_cur_len);
    403          
    404          							multi_frame = 1;
    405          							MDG_Info.Multi_Frame = false;
    406          						}
    407          					}
    408          				}
    409          				break;
    410          			case AP_FACTORY_CMD_PDSN_SET:
    411          			case AP_FACTORY_CMD_MBSN_SET:
    412          			case AP_FACTORY_CMD_FASTSLEEP_SET:
    413          			case AP_FACTORY_CMD_COLDSTART_SET:
    414          			case AP_FACTORY_CMD_TEST_RESULT_SET:
    415          			case AP_FACTORY_CMD_CLEAR_NOR_FLASH_SET:
    416          				MDG_Tx_Message[2] = 1;
    417          				break;
    418          			default:
    419          				break;
    420          		}
    421          	}
    422          	else
    423          	{
    424          		MDG_Tx_Message[2] = 1;
    425          	}
    426          }
    427          
    428          /***********************************************************************
    429           *  Function: mdg_check_enter_daignostic_mode 
    430           *  Parameters: rx message
    431           *  Returns: Manufacturing Daignostics message  test mode state
    432           *  Description: get the mode state 
    433           ***********************************************************************/
    434          static void mdg_check_enter_daignostic_mode(const uint8_t *rx_msg)
    435          {
    436          	if(0 == memcmp(rx_msg, mdg_enter_diag_key, 8))         // Enter diagnostic mode msg
    437          	{
    438          		Mdg_Enter_Diag = true;
    439          		mdg_in_mode = true;
    440          		memcpy((uint8_t *)MDG_Tx_Message, (uint8_t *)rx_msg, 8);
    441          		mdg_send_response();
    442          	}
    443          	else
    444          	{
    445          		MDG_Info.Command = rx_msg[1];
    446          		MDG_Info.MCU_Tx_Flag = true;
    447          		MDG_Info.Response_Code = MDG_RESP_NOT_ENTER_DIAG_MODE;
    448          	}
    449          }
    450          
    451          /***********************************************************************
    452           *  Function: mdg_check_exit_daignostic_mode 
    453           *  Parameters: rx message
    454           *  Returns: Manufacturing Daignostics message  test mode state
    455           *  Description: get the mode state 
    456           ***********************************************************************/
    457          static void mdg_check_exit_daignostic_mode(const uint8_t *rx_msg)
    458          {
    459          	if(0 == memcmp(rx_msg, mdg_exit_diag_key, 8))   // Exit diagnostic mode msg
    460          	{
    461          		Mdg_Enter_Diag = false;
    462          
    463          		memcpy((uint8_t *)MDG_Tx_Message, (uint8_t *)rx_msg, 8);
    464          		mdg_send_response();
    465          	}
    466          }
    467          
    468          /**********************************************************************      
    469           *   Function: mdg_clear_mfg_diag_timer
    470           *   Parameters: None
    471           *   Returns: None
    472           *   Description: Clears mdg_mfg_diag_timer
    473           **********************************************************************/
    474          static void mdg_clear_mfg_diag_timer(void)
    475          {
    476          	mdg_mfg_diag_timer = OS_Time();   //Clear the 5 Minute Timer
    477          }
    478          
    479          /**********************************************************************      
    480          *   Function: mdg_mfg_diag_timer_is_expired
    481          *   Parameters: None
    482          *   Returns: true if mdg_mfg_diag_timer has expired
    483          *   Description: function for checking if mfg_mode_timer is expired
    484          **********************************************************************/
    485          static bool mdg_mfg_diag_timer_is_expired(void)
    486          {
    487          	return (mdg_mfg_diag_timer <= OS_Time());
    488          }
    489          
    490          /**********************************************************************      
    491           *   Function: mdg_reset_mfg_diag_timer
    492           *   Parameters: None
    493           *   Returns: None
    494           *   Description: Resets mdg_mfg_diag_timer
    495           **********************************************************************/
    496          static void mdg_reset_mfg_diag_timer(void)
    497          {
    498          	mdg_mfg_diag_timer = (OS_Time() + (5 * ONE_MINUTE_IN_TICKS));      //Start 5 minute timer
    499          }
    500          
    501          /**********************************************************************
    502          *   Function: mdg_exit_mfg_diag_mode 
    503          *   Parameters: void
    504          *   Returns: void
    505          *   Description: Exit out of Manufacturing Diagnostics Mode
    506           *********************************************************************/
    507          static void mdg_exit_mfg_diag_mode(void)
    508          {
    509          	mdg_clear_mfg_diag_timer();
    510          
    511          	Mdg_Enter_Diag = false;
    512          }
    513          
    514          /**********************************************************************
    515          *   Function: mdg_send_response 
    516          *   Parameters: void
    517          *   Returns: void
    518          *   Description: 
    519           *********************************************************************/
    520          static void mdg_send_response(void)
    521          {
    522          #if 0
    523            PduInfoType pduinfo;
    524          	pduinfo.SduDataPtr = MDG_Tx_Message;
    525          	pduinfo.SduLength = 8;
    526          	pduinfo.CanId = 0;//CanId must set as 0 if use configured CAN id
    527          	/* Send SF */
    528          	CanIf_Transmit(CANIF_TX_vEcuC_Pdu6, &pduinfo);
    529          #endif
    530          	Diag_Tx_Message[DIAG_TX_FRAME_SIZE - 1] = C003_CMD_FINISHED;
    531          }
    532          
    533          /**********************************************************************
    534          *   Function:    MDG_Parse_Diag_Message
    535          *   Parameters: none
    536          *   Returns:    none
    537          *   Description: 
    538          **********************************************************************/
    539          void MDG_Parse_Diag_Message(void)
    540          {
    541          	if(MDG_Get_New_Message == true)
    542          	{
    543          		MDG_Get_New_Message = false;
    544          
    545          		mdg_reset_mfg_diag_timer();
    546          
    547          		if(Mdg_Enter_Diag == false)
    548          		{
    549          			mdg_check_enter_daignostic_mode(MDG_Rx_Message);
    550          		}
    551          		else
    552          		{
    553          			mdg_decode_diag_message(MDG_Rx_Message);
    554          		}
    555          	}
    556          
    557          	if(MDG_Info.Pending_Flag == true)
    558          	{
    559          		if(MDG_Info.Pending_Time > MDG_CMD_PENGDING_TIME)
    560          		{
    561          			MDG_Info.Response_Code = MDG_RESP_CANNOT_GET_DATA;
    562          			MDG_Info.MPU_Tx_Flag = true;
    563          			MDG_Info.Pending_Flag = false;
    564          		}
    565          	}
    566          
    567          	if(MDG_Info.MPU_Tx_Flag == true)
    568          	{
    569          		mdg_send_response();
    570          
    571          		MDG_Info.MPU_Tx_Flag = false;
    572          	}
    573          	else if((MDG_Info.MCU_Tx_Flag == true) || (MDG_Info.Multi_Frame == true))
    574          	{
    575          		mdg_encode_diag_message();
    576          
    577          		mdg_send_response();
    578          
    579          		MDG_Info.MCU_Tx_Flag = false;
    580          	}
    581          	
    582          	if((Mdg_Enter_Diag == true) && mdg_mfg_diag_timer_is_expired())
    583          	{
    584          		mdg_exit_mfg_diag_mode();
    585          	}
    586          }
    587          
    588          /**********************************************************************
    589          *   Function:    MDG_info_set_report_value
    590          *   Parameters: none
    591          *   Returns:    none
    592          *   Description: 
    593          **********************************************************************/
    594          static void mdg_info_mcu_report_no_error(void)
    595          {
    596          	MDG_Info.MCU_Tx_Flag = true;
    597          	MDG_Info.Response_Code = MDG_RESP_NO_ERROR;
    598          }
    599          
    600          /**********************************************************************
    601          *   Function: MDG_In_Mode 
    602          *   Parameters: void
    603          *   Returns: void
    604          *   Description: 
    605           *********************************************************************/
    606          bool MDG_In_Mode(void)
    607          {
    608          	return mdg_in_mode;
    609          }
    610          
    611          /**********************************************************************
    612          *   Function: MDG_Clear_Mode 
    613          *   Parameters: void
    614          *   Returns: void
    615          *   Description: 
    616           *********************************************************************/
    617          void MDG_Clear_Mode(void)
    618          {
    619          	mdg_in_mode = false;
    620          }
    621          
    622          /**********************************************************************
    623          *   Function: MDG_Init 
    624          *   Parameters: void
    625          *   Returns: void
    626          *   Description: 
    627           *********************************************************************/
    628          void MDG_Init(void)
    629          {
    630          	mdg_in_mode = false;
    631          }
    632          
    633          /**********************************************************************
    634          * REVISION RECORDS
    635          *********************************************************************/
    636          /**********************************************************************
    637          * $Log:
    638          *
    639          *********************************************************************/
    640          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CAN_upgrade_app_sw
         8   -> NOR_Flash_OTASectors_Erase
         8   -> crc_ccitt
         8   -> memcmp
         8   -> sFLASH_ReadBuffer
         8   -> sFLASH_WriteBuffer
       0   Diag_periodic_diag_hook
       0   MDG_Clear_Mode
       0   MDG_In_Mode
       0   MDG_Init
       8   MDG_Parse_Diag_Message
         8   -> mdg_check_enter_daignostic_mode
         8   -> mdg_decode_diag_message
         8   -> mdg_encode_diag_message
         8   -> mdg_exit_mfg_diag_mode
         8   -> mdg_mfg_diag_timer_is_expired
         8   -> mdg_reset_mfg_diag_timer
         8   -> mdg_send_response
      16   NOR_Flash_OTASectors_Erase
        16   -> sFLASH_EraseSector
      40   Write_MBSN_of_devinfo
        40   -> __aeabi_memcpy
        40   -> sFLASH_ReadBuffer
        40   -> sFLASH_WriteBuffer
       0   Write_PDSN_of_devinfo
      16   mdg_check_enter_daignostic_mode
        16   -> __aeabi_memcpy
        16   -> mdg_send_response
        16   -> memcmp
      16   mdg_check_exit_daignostic_mode
        16   -> __aeabi_memcpy
        16   -> mdg_send_response
        16   -> memcmp
       8   mdg_clear_mfg_diag_timer
         8   -> xTaskGetTickCountFromISR
     136   mdg_decode_diag_message
       136   -> ATProt_ACK_Got
       136   -> ATProt_GPRS_Connect
       136   -> ATProt_Sim_OK
       136   -> CAN_upgrade_app_sw
       136   -> GPS_Get_Ready_Flag
       136   -> Restart
       136   -> SY_Swid
       136   -> Sys_Clear_Wakeup_Src_Flags
       136   -> Sys_Req_Enter_Deep_Standby
       136   -> Telm_Get_DEVID
       136   -> Write_MBSN_of_devinfo
       136   -> Write_PDSN_of_devinfo
       136   -> __aeabi_memcpy
       136   -> clear_nv_config
       136   -> crc_ccitt
       136   -> load_from_nv
       136   -> mdg_check_enter_daignostic_mode
       136   -> mdg_check_exit_daignostic_mode
       136   -> mdg_info_mcu_report_no_error
       136   -> pcATProt_getImeiData
       136   -> pcATProt_getImsiData
       136   -> pcATProt_getRSSI
       136   -> rom_crc_ccitt
       136   -> set_factory_test
       136   -> set_init_flag
       136   -> vGps_Get_Gps_Info
       136   -> write_init_config
       8   mdg_encode_diag_message
         8   -> __aeabi_memcpy
       8   mdg_exit_mfg_diag_mode
         8   -> mdg_clear_mfg_diag_timer
       0   mdg_info_mcu_report_no_error
       8   mdg_mfg_diag_timer_is_expired
         8   -> xTaskGetTickCountFromISR
       8   mdg_reset_mfg_diag_timer
         8   -> xTaskGetTickCountFromISR
       0   mdg_send_response


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      56  AP_Factory_Data
     482  CAN_upgrade_app_sw
       4  Diag_Tx_Message
       2  Diag_periodic_diag_hook
       8  MDG_Clear_Mode
       4  MDG_Get_New_Message
       6  MDG_In_Mode
      28  MDG_Info
       8  MDG_Init
     148  MDG_Parse_Diag_Message
       8  MDG_Rx_Message
       8  MDG_Tx_Message
       4  Mdg_Enter_Diag
       1  Mdg_SW_Upgrage_mode
      30  NOR_Flash_OTASectors_Erase
       4  NorFlashAddr
      44  Write_MBSN_of_devinfo
       2  Write_PDSN_of_devinfo
       4  app_sw_length
       4  code_data
       2  crc_reg
       1  diag_tx_multi_frame_num
      32  flash_read_buf
      68  mdg_check_enter_daignostic_mode
      42  mdg_check_exit_daignostic_mode
      12  mdg_clear_mfg_diag_timer
    1090  mdg_decode_diag_message
     544  mdg_encode_diag_message
       8  mdg_enter_diag_key
       8  mdg_exit_diag_key
      14  mdg_exit_mfg_diag_mode
       4  mdg_in_mode
      14  mdg_info_mcu_report_no_error
       4  mdg_mfg_diag_timer
      24  mdg_mfg_diag_timer_is_expired
      16  mdg_reset_mfg_diag_timer
       8  mdg_send_response
       1  multi_frame
       2  packet_checksum
       1  packets_index
       2  packets_received
       2  pre_crc_reg
       1  rec_index
      20  sw_infor

 
   192 bytes in section .bss
     1 byte  in section .data
     4 bytes in section .noinit
    16 bytes in section .rodata
 2 694 bytes in section .text
 
 2 694 bytes of CODE  memory
    16 bytes of CONST memory
   197 bytes of DATA  memory

Errors: none
Warnings: none
