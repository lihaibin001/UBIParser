###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\drivers\stm32f10x_it.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\drivers\stm32f10x_it.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\stm32f10x_it.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\stm32f10x_it.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\drivers\stm32f10x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    CAN/DualCAN/stm32f10x_it.c 
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    08-April-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */ 
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32f10x_it.h"
     26          #include "uart.h"
     27          #include "standard.h"
     28          
     29          #include "Debug.h"
     30          
     31          /** @addtogroup STM32F10x_StdPeriph_Examples
     32            * @{
     33            */
     34          
     35          /** @addtogroup CAN_DualCAN
     36            * @{
     37            */ 
     38          
     39          /* Private typedef -----------------------------------------------------------*/
     40          /* Private define ------------------------------------------------------------*/
     41          /* Private macro -------------------------------------------------------------*/
     42          /* Private variables ---------------------------------------------------------*/
     43          //extern void LED_Display(uint8_t Ledstatus);
     44          
     45          /* Private function prototypes -----------------------------------------------*/
     46          /* Private functions ---------------------------------------------------------*/
     47          
     48          /******************************************************************************/
     49          /*            Cortex-M3 Processor Exceptions Handlers                         */
     50          /******************************************************************************/
     51          
     52          /**
     53            * @brief   This function handles NMI exception.
     54            * @param  None
     55            * @retval None
     56            */
     57          void NMI_Handler(void)
     58          {
     59          }
     60          
     61          /**
     62            * @brief  This function handles Hard Fault exception.
     63            * @param  None
     64            * @retval None
     65            */
     66          void HardFault_Handler(void)
     67          {
     68              /* Go to infinite loop when Hard Fault exception occurs */
     69              while (1)
     70              {
     71                  SY_Cold_Start();
     72              }
     73          }
     74          
     75          /**
     76            * @brief  This function handles Memory Manage exception.
     77            * @param  None
     78            * @retval None
     79            */
     80          void MemManage_Handler(void)
     81          {
     82              /* Go to infinite loop when Memory Manage exception occurs */
     83              while (1)
     84              {
     85                  SY_Cold_Start();
     86              }
     87          }
     88          
     89          /**
     90            * @brief  This function handles Bus Fault exception.
     91            * @param  None
     92            * @retval None
     93            */
     94          void BusFault_Handler(void)
     95          {
     96              /* Go to infinite loop when Bus Fault exception occurs */
     97          /*    while (1)
     98              {
     99                  SY_Cold_Start();
    100              }*/
    101          }
    102          
    103          /**
    104            * @brief  This function handles Usage Fault exception.
    105            * @param  None
    106            * @retval None
    107            */
    108          void UsageFault_Handler(void)
    109          {
    110              /* Go to infinite loop when Usage Fault exception occurs */
    111              while (1)
    112              {
    113                  SY_Cold_Start();
    114              }
    115          }
    116          
    117          /**
    118            * @brief  This function handles SVCall exception.
    119            * @param  None
    120            * @retval None
    121            */
    122          void SVC_Handler(void)
    123          {
    124          }
    125          
    126          /**
    127            * @brief  This function handles Debug Monitor exception.
    128            * @param  None
    129            * @retval None
    130            */
    131          void DebugMon_Handler(void)
    132          {
    133          }
    134          
    135          /**
    136            * @brief  This function handles PendSVC exception.
    137            * @param  None
    138            * @retval None
    139            */
    140          void PendSV_Handler(void)
    141          {
    142          }
    143          
    144          /**
    145            * @brief  This function handles SysTick Handler.
    146            * @param  None
    147            * @retval None
    148            */
    149          void SysTick_Handler(void)
    150          {
    151          }
    152          
    153          /******************************************************************************/
    154          /*            STM32F10x Peripherals Interrupt Handlers                        */
    155          /******************************************************************************/
    156          
    157          void EXTI0_IRQHandler(void)
    158          {
    159              if(EXTI_GetITStatus(EXTI_Line0) != RESET)  // external power on  int0
    160              {
    161                  /* Clear the  EXTI line 0 pending bit */
    162                  EXTI_ClearITPendingBit(EXTI_Line0);
    163                  Sys_Set_Ext_Batt_On_Wakeup_Flag();
    164              }
    165          }
    166          
    167          void EXTI1_IRQHandler(void)
    168          {
    169              if(EXTI_GetITStatus(EXTI_Line1) != RESET)  //
    170              {
    171                  /* Clear the  EXTI line 1 pending bit */
    172                  EXTI_ClearITPendingBit(EXTI_Line1);
    173              }
    174          }
    175          
    176          void EXTI2_IRQHandler(void)
    177          {
    178              if(EXTI_GetITStatus(EXTI_Line2) != RESET)  // ACC
    179              {
    180                  /* Clear the  EXTI line 2 pending bit */
    181                  EXTI_ClearITPendingBit(EXTI_Line2);
    182                  Sys_Set_Ignition_Wakeup_Flag();
    183              }
    184          }
    185          
    186          //EXTI5~9 wake up interrupt
    187          void EXTI9_5_IRQHandler(void)
    188          {
    189              /* from crash sensor (BMA253) */
    190              if(EXTI_GetITStatus(EXTI_Line6) != RESET)   // Gsensor
    191              {
    192                  /* Clear the  EXTI line 6 pending bit */
    193                  EXTI_ClearITPendingBit(EXTI_Line6);
    194                  
    195                  Sys_Set_Gsensor_Wakeup_Flag();
    196                  OS_Send_Message_FromISR(OS_SENSOR_TASK, \
    197                                         Build_Message(SENSOR_EVT_BMA253_CRASH,0));
    198              }
    199                
    200              if(EXTI_GetITStatus(EXTI_Line8) != RESET) 
    201              {
    202                  /* Clear the  EXTI line 8 pending bit */
    203                  EXTI_ClearITPendingBit(EXTI_Line8);
    204              }
    205          }
    206          
    207          /**
    208            * @brief  This function handles USARTy global interrupt request.
    209            * @param  None
    210            * @retval None
    211            */
    212          void USART1_IRQHandler(void)
    213          {
    214              if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
    215              {
    216                  UART_RX_ISR(UART_DEBUG_CHANNEL);
    217              }
    218              else if(USART_GetITStatus(USART1, USART_IT_TC) != RESET)
    219              {
    220                  UART_TX_ISR(UART_DEBUG_CHANNEL);
    221              }
    222          }
    223          
    224          void USART2_IRQHandler(void)
    225          {
    226              if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    227              {
    228                  UART_RX_ISR(UART_GSM_CHANNEL);
    229              }
    230              else if(USART_GetITStatus(USART2, USART_IT_TC) != RESET)
    231              {
    232                  UART_TX_ISR(UART_GSM_CHANNEL);
    233              }
    234          }
    235          
    236          void USART3_IRQHandler(void)
    237          {
    238              if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
    239              {
    240                  UART_RX_ISR(UART_GPS_CHANNEL);
    241              }
    242              else if(USART_GetITStatus(USART3, USART_IT_TC) != RESET)
    243              {
    244                  UART_TX_ISR(UART_GPS_CHANNEL);
    245              }
    246          }
    247          
    248          void UART4_IRQHandler(void)
    249          {
    250              if(USART_GetITStatus(UART4, USART_IT_RXNE) != RESET)
    251              {
    252                  UART_RX_ISR(UART_RESERVED_CHANNEL);
    253              }
    254              else if(USART_GetITStatus(UART4, USART_IT_TC) != RESET)
    255              {
    256                  UART_TX_ISR(UART_RESERVED_CHANNEL);
    257              }
    258          }
    259          
    260          /**
    261            * @brief  This function handles SPI1 or SPI2 global interrupt request.
    262            * @param  None
    263            * @retval None
    264            */
    265          void SPI2_IRQHandler(void)
    266          {
    267              if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_TXE) != RESET)
    268              {
    269                  /* Disable SPI_MASTER TXE interrupt */
    270                  SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_TXE, DISABLE);
    271              }
    272          }
    273          
    274          
    275          /**
    276            * @brief  This function handles CAN1 RX0 Handler.
    277            * @param  None
    278            * @retval None
    279            */
    280          void CAN1_RX0_IRQHandler(void)
    281          {
    282          }
    283          
    284          /**
    285            * @brief  This function handles CAN2 RX0 Handler.
    286            * @param  None
    287            * @retval None
    288            */
    289          
    290          void CAN2_RX0_IRQHandler(void)
    291          {
    292          }
    293          
    294          /**
    295            * @brief  This function handles RTC Alarm interrupt request.
    296            * @param  None
    297            * @retval None
    298            */
    299          
    300          void RTCAlarm_IRQHandler(void)
    301          {
    302              #ifdef USE_DEBUG
    303              Tick_Type time;
    304              time=OS_Time();
    305          
    306              DEBUG_PRINT1 (DEBUG_MEDIUM,"\r\n[SYSTEM]:TIME=%d ms# \r\n", time);
    307              #endif
    308          
    309              if(RTC_GetITStatus(RTC_IT_ALR) != RESET)
    310              {
    311                  /* Clear EXTI line17 pending bit */
    312                  EXTI_ClearITPendingBit(EXTI_Line17);
    313          
    314                  /* Check if the Wake-Up flag is set */
    315                  if(PWR_GetFlagStatus(PWR_FLAG_WU) != RESET)
    316                  {
    317                      /* Clear Wake Up flag */
    318                      PWR_ClearFlag(PWR_FLAG_WU);
    319                      //Feed_Dog();
    320          
    321                      if(rl_get_rtc_timeout() == PS_RTC_TICK)
    322                      {
    323                          Sys_Set_RTC_Wakeup_Flag();
    324                      }
    325                      else if(rl_get_rtc_timeout() == PS_RTC_DEEP_STANDBY_TICK)
    326                      {
    327          	            Sys_Set_RTC_Deep_Wakeup_Flag();
    328                      }
    329                  }
    330          
    331                  /* Wait until last write operation on RTC registers has finished */
    332                  RTC_WaitForLastTask();   
    333                  /* Clear RTC Alarm interrupt pending bit */
    334                  RTC_ClearITPendingBit(RTC_IT_ALR);
    335                  /* Wait until last write operation on RTC registers has finished */
    336                  RTC_WaitForLastTask();
    337          
    338                  /* Wait till RTC Second event occurs */
    339                  //RTC_ClearFlag(RTC_FLAG_SEC);
    340                  //while(RTC_GetFlagStatus(RTC_FLAG_SEC) == RESET);
    341          
    342                  /* Set the RTC Alarm after 5s or 5min,depend on mode*/
    343                  RTC_SetAlarm(RTC_GetCounter()+ rl_get_rtc_timeout());
    344                  /* Wait until last write operation on RTC registers has finished */
    345                  RTC_WaitForLastTask();
    346          
    347                  rl_rtc_disable();
    348              }
    349          }
    350          
    351          /**
    352            * @brief  This function handles RTC global interrupt request.
    353            * @param  None
    354            * @retval None
    355            */
    356          void RTC_IRQHandler(void)
    357          {
    358              if (RTC_GetITStatus(RTC_IT_SEC) != RESET)
    359              {
    360                  /* Clear Interrupt pending bit */
    361                  RTC_ClearITPendingBit(RTC_FLAG_SEC);
    362              }
    363          }
    364          
    365          /******************************************************************************/
    366          /*                 STM32F10x Peripherals Interrupt Handlers                   */
    367          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    368          /*  available peripheral interrupt handler's name please refer to the startup */
    369          /*  file (startup_stm32f10x_xx.s).                                            */
    370          /******************************************************************************/
    371          
    372          /**
    373            * @brief  This function handles PPP interrupt request.
    374            * @param  None
    375            * @retval None
    376            */
    377          /*void PPP_IRQHandler(void)
    378          {
    379          }*/
    380          
    381          
    382          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   CAN1_RX0_IRQHandler
       0   CAN2_RX0_IRQHandler
       0   DebugMon_Handler
       8   EXTI0_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> Sys_Set_Ext_Batt_On_Wakeup_Flag
       8   EXTI1_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
       8   EXTI2_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> Sys_Set_Ignition_Wakeup_Flag
       8   EXTI9_5_IRQHandler
         8   -> Build_Message
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> OS_Send_Message_FromISR
         8   -> Sys_Set_Gsensor_Wakeup_Flag
       8   HardFault_Handler
         8   -> Restart
       8   MemManage_Handler
         8   -> Restart
       0   NMI_Handler
       0   PendSV_Handler
       8   RTCAlarm_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> PWR_ClearFlag
         8   -> PWR_GetFlagStatus
         8   -> RTC_ClearITPendingBit
         8   -> RTC_GetCounter
         8   -> RTC_GetITStatus
         8   -> RTC_SetAlarm
         8   -> RTC_WaitForLastTask
         8   -> Sys_Set_RTC_Deep_Wakeup_Flag
         8   -> Sys_Set_RTC_Wakeup_Flag
         8   -> rl_get_rtc_timeout
         8   -> rl_rtc_disable
       8   RTC_IRQHandler
         8   -> RTC_ClearITPendingBit
         8   -> RTC_GetITStatus
       8   SPI2_IRQHandler
         8   -> SPI_I2S_GetITStatus
         8   -> SPI_I2S_ITConfig
       0   SVC_Handler
       0   SysTick_Handler
       8   UART4_IRQHandler
         8   -> UART_RX_ISR
         8   -> UART_TX_ISR
         8   -> USART_GetITStatus
       8   USART1_IRQHandler
         8   -> UART_RX_ISR
         8   -> UART_TX_ISR
         8   -> USART_GetITStatus
       8   USART2_IRQHandler
         8   -> UART_RX_ISR
         8   -> UART_TX_ISR
         8   -> USART_GetITStatus
       8   USART3_IRQHandler
         8   -> UART_RX_ISR
         8   -> UART_TX_ISR
         8   -> USART_GetITStatus
       8   UsageFault_Handler
         8   -> Restart


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       2  BusFault_Handler
       2  CAN1_RX0_IRQHandler
       2  CAN2_RX0_IRQHandler
       2  DebugMon_Handler
      24  EXTI0_IRQHandler
      20  EXTI1_IRQHandler
      24  EXTI2_IRQHandler
      60  EXTI9_5_IRQHandler
      10  HardFault_Handler
      10  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
     104  RTCAlarm_IRQHandler
      20  RTC_IRQHandler
      26  SPI2_IRQHandler
       2  SVC_Handler
       2  SysTick_Handler
      46  UART4_IRQHandler
      46  USART1_IRQHandler
      46  USART2_IRQHandler
      46  USART3_IRQHandler
      10  UsageFault_Handler

 
 528 bytes in section .text
 
 528 bytes of CODE memory

Errors: none
Warnings: none
