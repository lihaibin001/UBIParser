###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:32
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\FreeRTOS\timer.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\FreeRTOS\timer.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\timer.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\timer.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\FreeRTOS\timer.c
      1          /* $Header:   timer.c   $*/
      2          /**********************************************************************
      3             Title                    : TIMER.C
      4          
      5             Module Description       : This is the standard code file for the
      6                                        Timer module
      7          
      8             Author                   : 
      9          
     10             Created                  : 
     11          
     12             Configuration ID         : 
     13          
     14          **********************************************************************/
     15          
     16          /*********************************************************************
     17          * Installation Instructions (periodic tasks, etc.)
     18          *
     19          *
     20          **********************************************************************/
     21          
     22          
     23          /*********************************************************************/
     24          /* Include header files                                              */
     25          /*********************************************************************/
     26          /* Dependent "compile.cmd"                                           */
     27          /*********************************************************************/
     28          #include    "standard.h"
     29          
     30          /*********************************************************************/
     31          /* File level pragmas                                                */
     32          /*********************************************************************/
     33          
     34          /*********************************************************************/
     35          /* Constant and Macro Definitions using #define                      */
     36          /*********************************************************************/
     37          
     38          // faster as subroutine (timer_id must be valid)
     39          #define Timer_Is_Timer_Active(timer_id)  (tmr_array[(timer_id)].active_status)
     40          #define Timer_Is_Timer_Running(timer_id) (OS_Time() < tmr_array[timer_id].time_stamp)
     41          
     42          /*********************************************************************/
     43          /* Enumerations and Structures and Typedefs                          */
     44          /*********************************************************************/
     45          typedef struct TMR_Data_Tag
     46          {
     47              bool        active_status;
     48              Tick_Type   time_stamp;
     49              void_fptr   fptr;
     50          } TMR_Data_T;
     51          
     52          /*********************************************************************/
     53          /* Global and Const Variable Defining Definitions / Initializations  */
     54          /*********************************************************************/
     55          
     56          /*********************************************************************/
     57          /* Static Variables and Const Variables With File Level Scope        */
     58          /*********************************************************************/
     59          static TMR_Data_T tmr_array[NUMBER_OF_TIMERS];
     60          
     61          /*********************************************************************/
     62          /* ROM Const Variables With File Level Scope                         */
     63          /*********************************************************************/
     64          
     65          /*********************************************************************/
     66          /* Function Prototypes for Private Functions with File Level Scope   */
     67          /*********************************************************************/
     68          
     69          /*********************************************************************/
     70          /* Add User defined functions                                        */
     71          /*********************************************************************/
     72          
     73          /*********************************************************************/
     74          /* Function Definitions                                              */
     75          /*********************************************************************/
     76          
     77          /**********************************************************************
     78          *
     79          *    Function: TMR_Initialize
     80          *
     81          *  Parameters: none
     82          *
     83          *     Returns: none
     84          *
     85          * Description: initialization of the timer module
     86          *
     87          *
     88          **********************************************************************/
     89          void TMR_Initialize (void)
     90          {
     91              TMR_ID_T i;
     92          
     93              for (i=(TMR_ID_T)0; i < NUMBER_OF_TIMERS; i++)
     94              {
     95                  tmr_array[i].active_status = false;
     96                  tmr_array[i].time_stamp    = 0;
     97                  tmr_array[i].fptr          = null_action;
     98              }
     99          }
    100          
    101          /**********************************************************************
    102          *
    103          *    Function: TMR_Check_Timers
    104          *
    105          *  Parameters: none
    106          *
    107          *     Returns: none
    108          *
    109          * Description: checks automatically all timers (called in Periodic_Task)
    110          *
    111          *
    112          **********************************************************************/
    113          void TMR_Check_Timers (void)
    114          {
    115              TMR_ID_T i;
    116          
    117              for (i = (TMR_ID_T)0; i < NUMBER_OF_TIMERS; i++)
    118              {
    119                  // is timer active AND ran down (no more running)?
    120                  if (Timer_Is_Timer_Active(i) && !Timer_Is_Timer_Running(i))
    121                  {
    122                      // in case of null_action don't stop the timer because 
    123                      // the task who called this service wants to check the
    124                      // timer itself
    125                      if(tmr_array[i].fptr != null_action)
    126                      {
    127                          TMR_Stop_Timer(i);
    128                      }
    129                      (*tmr_array[i].fptr)();     //execute the desired function
    130                  }
    131              }
    132          }
    133          
    134          /**********************************************************************
    135          *
    136          *    Function: TMR_Start_Timer
    137          *
    138          *  Parameters: timer_id - id name of the timer
    139          *              period   - amount of ticks the timer should run down
    140          *
    141          *     Returns: none
    142          *
    143          * Description: starts/restarts a timer
    144          *
    145          *
    146          **********************************************************************/
    147          void TMR_Start_Timer (TMR_ID_T timer_id, Tick_Type period, void_fptr func_ptr)
    148          {
    149              if (NUMBER_OF_TIMERS > timer_id)
    150              {
    151                  tmr_array[timer_id].active_status = true;
    152                  tmr_array[timer_id].time_stamp    = OS_Time() + period;
    153                  tmr_array[timer_id].fptr          = ((NULL == func_ptr) ? null_action : func_ptr);
    154              }
    155          }
    156          
    157          /**********************************************************************
    158          *
    159          *    Function: TMR_Stop_Timer
    160          *
    161          *  Parameters: timer_id - id name of the timer
    162          *
    163          *     Returns: none
    164          *
    165          * Description: stops a timer
    166          *
    167          *
    168          **********************************************************************/
    169          void TMR_Stop_Timer (TMR_ID_T timer_id)
    170          {
    171              if (NUMBER_OF_TIMERS > timer_id)
    172              {
    173                  tmr_array[timer_id].active_status = false;
    174                  tmr_array[timer_id].time_stamp    = 0;
    175                  // tmr_array[timer_id].fptr          = null_action; 
    176                  //not reset the pointer, because the sequence is changed in TMR_Check_Timers()
    177              }
    178          }
    179          
    180          /**********************************************************************
    181          *
    182          *    Function: TMR_Is_Timer_Active
    183          *
    184          *  Parameters: timer_id - id name of the timer
    185          *
    186          *     Returns: true  - timer is in use, that is active
    187          *              false - timer is not in use
    188          *
    189          * Description: returns if a certain timer is active or not
    190          *
    191          *
    192          **********************************************************************/
    193          bool TMR_Is_Timer_Active (TMR_ID_T timer_id)
    194          {
    195              if (NUMBER_OF_TIMERS > timer_id)
    196              {
    197                  return(Timer_Is_Timer_Active(timer_id));
    198              }
    199          
    200              return(false);
    201          }
    202          
    203          /**********************************************************************
    204          *
    205          *    Function: TMR_Is_Timer_Running
    206          *
    207          *  Parameters: timer_id - id name of the timer
    208          *
    209          *     Returns: true  - timer is still running
    210          *              false - timer is expired
    211          *
    212          * Description: returns if a certain timer is running or not
    213          *
    214          *
    215          **********************************************************************/
    216          bool TMR_Is_Timer_Running (TMR_ID_T timer_id)
    217          {
    218              if (NUMBER_OF_TIMERS > timer_id)
    219              {
    220                  return(Timer_Is_Timer_Running(timer_id));
    221              }
    222          
    223              return(false);
    224          }
    225          
    226          /**********************************************************************
    227          *
    228          *    Function: TMR_Get_Pending_Time
    229          *
    230          *  Parameters: timer_id - id name of the timer
    231          *
    232          *     Returns: Tick_Type pending_time
    233          *
    234          * Description: returns the pending time of a timer
    235          *
    236          *
    237          **********************************************************************/
    238          Tick_Type TMR_Get_Pending_Time (TMR_ID_T timer_id)
    239          {
    240              Tick_Type pending_time = 0;
    241          
    242              if (NUMBER_OF_TIMERS > timer_id)
    243              {
    244                  Tick_Type os_time = OS_Time();
    245          
    246                  if (os_time < tmr_array[timer_id].time_stamp)
    247                  {
    248                      pending_time= tmr_array[timer_id].time_stamp - os_time;
    249                  }
    250              }
    251          
    252              return(pending_time);
    253          }
    254          
    255          /**********************************************************************
    256          *
    257          *    Function: null_action
    258          *
    259          *  Parameters: None
    260          *
    261          *     Returns: None
    262          *
    263          * Description: This function is needed as parameter for TMR_Start_Timer()
    264          *              only if no other function is going to be called!
    265          *
    266          *
    267          **********************************************************************/
    268          void null_action (void)
    269          {
    270             // nothing to do
    271          }
    272          
    273          
    274          /**********************************************************************
    275          *                                                                     *
    276          * REVISION RECORDS                                                    *
    277          *                                                                     *
    278          **********************************************************************/
    279          /*********************************************************************/
    280          /* 
    281           *
    282           *********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TMR_Check_Timers
         8   -- Indirect call
         8   -> TMR_Stop_Timer
         8   -> xTaskGetTickCountFromISR
      16   TMR_Get_Pending_Time
        16   -> xTaskGetTickCountFromISR
       0   TMR_Initialize
       0   TMR_Is_Timer_Active
       8   TMR_Is_Timer_Running
         8   -> xTaskGetTickCountFromISR
      16   TMR_Start_Timer
        16   -> xTaskGetTickCountFromISR
       0   TMR_Stop_Timer
       0   null_action


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
     100  TMR_Check_Timers
      54  TMR_Get_Pending_Time
      62  TMR_Initialize
      22  TMR_Is_Timer_Active
      46  TMR_Is_Timer_Running
      76  TMR_Start_Timer
      36  TMR_Stop_Timer
       2  null_action
     192  tmr_array

 
 192 bytes in section .bss
 402 bytes in section .text
 
 402 bytes of CODE memory
 192 bytes of DATA memory

Errors: none
Warnings: none
