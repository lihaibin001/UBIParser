###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.2.11947/W32 for ARM       15/Sep/2017  09:59:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_iwdg.c
#    Command line =  
#        D:\workspace\dr002\dr002_suming\v1_board\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_iwdg.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa050 -o
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\.\ -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Diag_Factory\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\common\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\power\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\SysMan\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Protocol\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\include\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\FreeRTOS\portable\IAR\ARM_CM3\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\drivers\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Arch\stm32f1\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\GPRS\
#        -I
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\..\main_app\Sensors\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\List\stm32f10x_iwdg.lst
#    Object file  =  
#        D:\workspace\dr002\dr002_suming\v1_board\CORTEX_STM32F103_IAR\Debug\Obj\stm32f10x_iwdg.o
#
###############################################################################

D:\workspace\dr002\dr002_suming\v1_board\main_app\Arch\stm32f1\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_iwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_iwdg.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the IWDG firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_iwdg.h"
     24          
     25          /** @addtogroup STM32F10x_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup IWDG 
     30            * @brief IWDG driver modules
     31            * @{
     32            */ 
     33          
     34          /** @defgroup IWDG_Private_TypesDefinitions
     35            * @{
     36            */
     37          
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup IWDG_Private_Defines
     43            * @{
     44            */ 
     45          
     46          /* ---------------------- IWDG registers bit mask ----------------------------*/
     47          
     48          /* KR register bit mask */
     49          #define KR_KEY_Reload    ((uint16_t)0xAAAA)
     50          #define KR_KEY_Enable    ((uint16_t)0xCCCC)
     51          /**
     52            * @}
     53            */ 
     54          
     55          /** @defgroup IWDG_Private_Macros
     56            * @{
     57            */
     58          
     59          /**
     60            * @}
     61            */
     62          
     63          /** @defgroup IWDG_Private_Variables
     64            * @{
     65            */
     66          static bool iwdg_initialized=false;
     67          /**
     68            * @}
     69            */
     70          
     71          /** @defgroup IWDG_Private_FunctionPrototypes
     72            * @{
     73            */
     74          
     75          /**
     76            * @}
     77            */
     78          
     79          /** @defgroup IWDG_Private_Functions
     80            * @{
     81            */
     82          
     83          /**
     84            * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
     85            * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
     86            *   This parameter can be one of the following values:
     87            *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
     88            *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
     89            * @retval None
     90            */
     91          void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
     92          {
     93            /* Check the parameters */
     94            assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
     95            IWDG->KR = IWDG_WriteAccess;
     96          }
     97          
     98          /**
     99            * @brief  Sets IWDG Prescaler value.
    100            * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
    101            *   This parameter can be one of the following values:
    102            *     @arg IWDG_Prescaler_4: IWDG prescaler set to 4
    103            *     @arg IWDG_Prescaler_8: IWDG prescaler set to 8
    104            *     @arg IWDG_Prescaler_16: IWDG prescaler set to 16
    105            *     @arg IWDG_Prescaler_32: IWDG prescaler set to 32
    106            *     @arg IWDG_Prescaler_64: IWDG prescaler set to 64
    107            *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
    108            *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
    109            * @retval None
    110            */
    111          void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
    112          {
    113            /* Check the parameters */
    114            assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
    115            IWDG->PR = IWDG_Prescaler;
    116          }
    117          
    118          /**
    119            * @brief  Sets IWDG Reload value.
    120            * @param  Reload: specifies the IWDG Reload value.
    121            *   This parameter must be a number between 0 and 0x0FFF.
    122            * @retval None
    123            */
    124          void IWDG_SetReload(uint16_t Reload)
    125          {
    126            /* Check the parameters */
    127            assert_param(IS_IWDG_RELOAD(Reload));
    128            IWDG->RLR = Reload;
    129          }
    130          
    131          /**
    132            * @brief  Reloads IWDG counter with value defined in the reload register
    133            *   (write access to IWDG_PR and IWDG_RLR registers disabled).
    134            * @param  None
    135            * @retval None
    136            */
    137          void IWDG_ReloadCounter(void)
    138          {
    139          	if(iwdg_initialized==true)
    140          	{
    141           	    IWDG->KR = KR_KEY_Reload;
    142          	}
    143          }
    144          
    145          /**
    146            * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
    147            * @param  None
    148            * @retval None
    149            */
    150          void IWDG_Enable(void)
    151          {
    152            IWDG->KR = KR_KEY_Enable;
    153          }
    154          
    155          /**
    156            * @brief  Checks whether the specified IWDG flag is set or not.
    157            * @param  IWDG_FLAG: specifies the flag to check.
    158            *   This parameter can be one of the following values:
    159            *     @arg IWDG_FLAG_PVU: Prescaler Value Update on going
    160            *     @arg IWDG_FLAG_RVU: Reload Value Update on going
    161            * @retval The new state of IWDG_FLAG (SET or RESET).
    162            */
    163          FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
    164          {
    165            FlagStatus bitstatus = RESET;
    166            /* Check the parameters */
    167            assert_param(IS_IWDG_FLAG(IWDG_FLAG));
    168            if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
    169            {
    170              bitstatus = SET;
    171            }
    172            else
    173            {
    174              bitstatus = RESET;
    175            }
    176            /* Return the flag status */
    177            return bitstatus;
    178          }
    179          
    180          void IWDG_Init(void)
    181          {
    182             	/* LSI enable for iwdg*/
    183             	RCC_LSICmd(ENABLE);//open LSI
    184             	while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY)==RESET);// Wait till LSI is ready 
    185          	
    186          	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
    187          
    188          	IWDG_SetPrescaler(IWDG_Prescaler_128);//13s
    189          //	IWDG_SetPrescaler(IWDG_Prescaler_256);//26s
    190          	//IWDG->RLR: the default IWDG Reload value is 0x0FFF
    191          	//IWDG_SetReload(0x0FFF);
    192          	IWDG_ReloadCounter();//    
    193          	IWDG_Enable();
    194          	iwdg_initialized=true;
    195          }
    196          
    197          void Force_WatchDog_Reset(void)
    198          {
    199          	if(iwdg_initialized==false)
    200          	{
    201          		IWDG_Init();
    202          	}
    203          	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
    204          	IWDG_SetReload(0x0000);
    205          	IWDG_ReloadCounter();//    
    206          }
    207          /**
    208            * @}
    209            */
    210          
    211          /**
    212            * @}
    213            */
    214          
    215          /**
    216            * @}
    217            */
    218          
    219          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Force_WatchDog_Reset
         8   -> IWDG_Init
         8   -> IWDG_ReloadCounter
         8   -> IWDG_SetReload
         8   -> IWDG_WriteAccessCmd
       0   IWDG_Enable
       0   IWDG_GetFlagStatus
       8   IWDG_Init
         8   -> IWDG_Enable
         8   -> IWDG_ReloadCounter
         8   -> IWDG_SetPrescaler
         8   -> IWDG_WriteAccessCmd
         8   -> RCC_GetFlagStatus
         8   -> RCC_LSICmd
       0   IWDG_ReloadCounter
       0   IWDG_SetPrescaler
       0   IWDG_SetReload
       0   IWDG_WriteAccessCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
      34  Force_WatchDog_Reset
      10  IWDG_Enable
      24  IWDG_GetFlagStatus
      48  IWDG_Init
      18  IWDG_ReloadCounter
       8  IWDG_SetPrescaler
       8  IWDG_SetReload
       8  IWDG_WriteAccessCmd
       4  iwdg_initialized

 
   4 bytes in section .bss
 178 bytes in section .text
 
 178 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
